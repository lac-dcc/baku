```func0.c
#include "sortedlist6_19.h" 
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop1 = 0;
   unsigned int loopLimit1 = (rand()%loopsFactor)/2 + 1;
   for(; loop1 < loopLimit1; loop1++) {
      sortedlist_t* sortedlist1;
      if (pCounter > 0) {
         sortedlist1 = vars->data[--pCounter];
         sortedlist1->refC++;
         DEBUG_COPY(sortedlist1->id);
      } else {
         sortedlist1 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist1->refC = 1;
         sortedlist1->id = 1;
         sortedlist1->n = 0;
         sortedlist1->root = NULL;
         DEBUG_NEW(sortedlist1->id);
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist1;
      sortedlist_t* sortedlist2 = func10(&params0, rng(), loopsFactor);
      DEBUG_RETURN(sortedlist2->id);
      free(params0.data);
      sortedlist2->refC--;
      if(sortedlist2->refC == 0){
           cell_t* cell20 = sortedlist2->root;
           cell_t* tmp20  = NULL;
           while(cell20 != NULL) {
               tmp20 = cell20->next;
               free(cell20);
               cell20 = tmp20;
           }
           free(sortedlist2);
           DEBUG_FREE(sortedlist2->id);
      }
      sortedlist1->refC--;
      if(sortedlist1->refC == 0){
           cell_t* cell21 = sortedlist1->root;
           cell_t* tmp21  = NULL;
           while(cell21 != NULL) {
               tmp21 = cell21->next;
               free(cell21);
               cell21 = tmp21;
           }
           free(sortedlist1);
           DEBUG_FREE(sortedlist1->id);
      }
   }
   sortedlist_t* sortedlist41;
   if (pCounter > 0) {
      sortedlist41 = vars->data[--pCounter];
      sortedlist41->refC++;
      DEBUG_COPY(sortedlist41->id);
   } else {
      sortedlist41 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist41->refC = 1;
      sortedlist41->id = 41;
      sortedlist41->n = 0;
      sortedlist41->root = NULL;
      DEBUG_NEW(sortedlist41->id);
   }
   return sortedlist41;
}


```
```func1.c
#include "sortedlist6_19.h" 
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist43 = func4(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist43->id);
   free(params0.data);
   return sortedlist43;
}


```
```func10.c
#include "sortedlist6_19.h" 
sortedlist_t* func10(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist3 = func11(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist3->id);
      free(params0.data);
      sortedlist3->refC--;
      if(sortedlist3->refC == 0){
           cell_t* cell1 = sortedlist3->root;
           cell_t* tmp1  = NULL;
           while(cell1 != NULL) {
               tmp1 = cell1->next;
               free(cell1);
               cell1 = tmp1;
           }
           free(sortedlist3);
           DEBUG_FREE(sortedlist3->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist5 = func12(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist5->id);
      free(params0.data);
      sortedlist5->refC--;
      if(sortedlist5->refC == 0){
           cell_t* cell19 = sortedlist5->root;
           cell_t* tmp19  = NULL;
           while(cell19 != NULL) {
               tmp19 = cell19->next;
               free(cell19);
               cell19 = tmp19;
           }
           free(sortedlist5);
           DEBUG_FREE(sortedlist5->id);
      }
   }
   sortedlist_t* sortedlist40;
   if (pCounter > 0) {
      sortedlist40 = vars->data[--pCounter];
      sortedlist40->refC++;
      DEBUG_COPY(sortedlist40->id);
   } else {
      sortedlist40 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist40->refC = 1;
      sortedlist40->id = 40;
      sortedlist40->n = 0;
      sortedlist40->root = NULL;
      DEBUG_NEW(sortedlist40->id);
   }
   return sortedlist40;
}


```
```func11.c
#include "sortedlist6_19.h" 
sortedlist_t* func11(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist4;
   if (pCounter > 0) {
      sortedlist4 = vars->data[--pCounter];
      sortedlist4->refC++;
      DEBUG_COPY(sortedlist4->id);
   } else {
      sortedlist4 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist4->refC = 1;
      sortedlist4->id = 4;
      sortedlist4->n = 0;
      sortedlist4->root = NULL;
      DEBUG_NEW(sortedlist4->id);
   }
   unsigned int loop2 = 0;
   unsigned int loopLimit2 = (rand()%loopsFactor)/3 + 1;
   for(; loop2 < loopLimit2; loop2++) {
      if(sortedlist4 != NULL && sortedlist4->n > 0)
      {
          cell_t* cell0 = sortedlist4->root;
          if(cell0->val == 86)
          {
              cell0 = cell0->next;
              sortedlist4->n--;
          }else{
              while(cell0->next != NULL && cell0->next->val != 86) cell0 = cell0->next;
              if(cell0->next != NULL)
              {
                  cell0 = cell0->next->next;
                  sortedlist4->n--;
              }
           }
      }
   }
   return sortedlist4;
}


```
```func12.c
#include "sortedlist6_19.h" 
sortedlist_t* func12(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist6 = func16(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist6->id);
   free(params0.data);
   return sortedlist6;
}


```
```func13.c
#include "sortedlist6_19.h" 
sortedlist_t* func13(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist48 = func14(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist48->id);
      free(params0.data);
      sortedlist48->refC--;
      if(sortedlist48->refC == 0){
           cell_t* cell27 = sortedlist48->root;
           cell_t* tmp27  = NULL;
           while(cell27 != NULL) {
               tmp27 = cell27->next;
               free(cell27);
               cell27 = tmp27;
           }
           free(sortedlist48);
           DEBUG_FREE(sortedlist48->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist52 = func15(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist52->id);
      free(params0.data);
      sortedlist52->refC--;
      if(sortedlist52->refC == 0){
           cell_t* cell35 = sortedlist52->root;
           cell_t* tmp35  = NULL;
           while(cell35 != NULL) {
               tmp35 = cell35->next;
               free(cell35);
               cell35 = tmp35;
           }
           free(sortedlist52);
           DEBUG_FREE(sortedlist52->id);
      }
   }
   sortedlist_t* sortedlist66;
   if (pCounter > 0) {
      sortedlist66 = vars->data[--pCounter];
      sortedlist66->refC++;
      DEBUG_COPY(sortedlist66->id);
   } else {
      sortedlist66 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist66->refC = 1;
      sortedlist66->id = 66;
      sortedlist66->n = 0;
      sortedlist66->root = NULL;
      DEBUG_NEW(sortedlist66->id);
   }
   return sortedlist66;
}


```
```func14.c
#include "sortedlist6_19.h" 
sortedlist_t* func14(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop8 = 0;
   unsigned int loopLimit8 = (rand()%loopsFactor)/2 + 1;
   for(; loop8 < loopLimit8; loop8++) {
      sortedlist_t* sortedlist49;
      if (pCounter > 0) {
         sortedlist49 = vars->data[--pCounter];
         sortedlist49->refC++;
         DEBUG_COPY(sortedlist49->id);
      } else {
         sortedlist49 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist49->refC = 1;
         sortedlist49->id = 49;
         sortedlist49->n = 0;
         sortedlist49->root = NULL;
         DEBUG_NEW(sortedlist49->id);
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist49;
      sortedlist_t* sortedlist50 = func22(&params0, rng(), loopsFactor);
      DEBUG_RETURN(sortedlist50->id);
      free(params0.data);
      sortedlist50->refC--;
      if(sortedlist50->refC == 0){
           cell_t* cell25 = sortedlist50->root;
           cell_t* tmp25  = NULL;
           while(cell25 != NULL) {
               tmp25 = cell25->next;
               free(cell25);
               cell25 = tmp25;
           }
           free(sortedlist50);
           DEBUG_FREE(sortedlist50->id);
      }
      sortedlist49->refC--;
      if(sortedlist49->refC == 0){
           cell_t* cell26 = sortedlist49->root;
           cell_t* tmp26  = NULL;
           while(cell26 != NULL) {
               tmp26 = cell26->next;
               free(cell26);
               cell26 = tmp26;
           }
           free(sortedlist49);
           DEBUG_FREE(sortedlist49->id);
      }
   }
   sortedlist_t* sortedlist51;
   if (pCounter > 0) {
      sortedlist51 = vars->data[--pCounter];
      sortedlist51->refC++;
      DEBUG_COPY(sortedlist51->id);
   } else {
      sortedlist51 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist51->refC = 1;
      sortedlist51->id = 51;
      sortedlist51->n = 0;
      sortedlist51->root = NULL;
      DEBUG_NEW(sortedlist51->id);
   }
   return sortedlist51;
}


```
```func15.c
#include "sortedlist6_19.h" 
sortedlist_t* func15(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist53 = func19(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist53->id);
   free(params0.data);
   return sortedlist53;
}


```
```func16.c
#include "sortedlist6_19.h" 
sortedlist_t* func16(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist7 = func17(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist7->id);
      free(params0.data);
      sortedlist7->refC--;
      if(sortedlist7->refC == 0){
           cell_t* cell9 = sortedlist7->root;
           cell_t* tmp9  = NULL;
           while(cell9 != NULL) {
               tmp9 = cell9->next;
               free(cell9);
               cell9 = tmp9;
           }
           free(sortedlist7);
           DEBUG_FREE(sortedlist7->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist21 = func18(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist21->id);
      free(params0.data);
      sortedlist21->refC--;
      if(sortedlist21->refC == 0){
           cell_t* cell18 = sortedlist21->root;
           cell_t* tmp18  = NULL;
           while(cell18 != NULL) {
               tmp18 = cell18->next;
               free(cell18);
               cell18 = tmp18;
           }
           free(sortedlist21);
           DEBUG_FREE(sortedlist21->id);
      }
   }
   sortedlist_t* sortedlist39;
   if (pCounter > 0) {
      sortedlist39 = vars->data[--pCounter];
      sortedlist39->refC++;
      DEBUG_COPY(sortedlist39->id);
   } else {
      sortedlist39 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist39->refC = 1;
      sortedlist39->id = 39;
      sortedlist39->n = 0;
      sortedlist39->root = NULL;
      DEBUG_NEW(sortedlist39->id);
   }
   return sortedlist39;
}


```
```func17.c
#include "sortedlist6_19.h" 
sortedlist_t* func17(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop3 = 0;
   unsigned int loopLimit3 = (rand()%loopsFactor)/3 + 1;
   for(; loop3 < loopLimit3; loop3++) {
      sortedlist_t* sortedlist8;
      if (pCounter > 0) {
         sortedlist8 = vars->data[--pCounter];
         sortedlist8->refC++;
         DEBUG_COPY(sortedlist8->id);
      } else {
         sortedlist8 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist8->refC = 1;
         sortedlist8->id = 8;
         sortedlist8->n = 0;
         sortedlist8->root = NULL;
         DEBUG_NEW(sortedlist8->id);
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist8;
      sortedlist_t* sortedlist9 = func28(&params0, rng(), loopsFactor);
      DEBUG_RETURN(sortedlist9->id);
      free(params0.data);
      sortedlist9->refC--;
      if(sortedlist9->refC == 0){
           cell_t* cell7 = sortedlist9->root;
           cell_t* tmp7  = NULL;
           while(cell7 != NULL) {
               tmp7 = cell7->next;
               free(cell7);
               cell7 = tmp7;
           }
           free(sortedlist9);
           DEBUG_FREE(sortedlist9->id);
      }
      sortedlist8->refC--;
      if(sortedlist8->refC == 0){
           cell_t* cell8 = sortedlist8->root;
           cell_t* tmp8  = NULL;
           while(cell8 != NULL) {
               tmp8 = cell8->next;
               free(cell8);
               cell8 = tmp8;
           }
           free(sortedlist8);
           DEBUG_FREE(sortedlist8->id);
      }
   }
   sortedlist_t* sortedlist20;
   if (pCounter > 0) {
      sortedlist20 = vars->data[--pCounter];
      sortedlist20->refC++;
      DEBUG_COPY(sortedlist20->id);
   } else {
      sortedlist20 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist20->refC = 1;
      sortedlist20->id = 20;
      sortedlist20->n = 0;
      sortedlist20->root = NULL;
      DEBUG_NEW(sortedlist20->id);
   }
   return sortedlist20;
}


```
```func18.c
#include "sortedlist6_19.h" 
sortedlist_t* func18(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist22 = func22(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist22->id);
   free(params0.data);
   return sortedlist22;
}


```
```func19.c
#include "sortedlist6_19.h" 
sortedlist_t* func19(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist54 = func20(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist54->id);
      free(params0.data);
      sortedlist54->refC--;
      if(sortedlist54->refC == 0){
           cell_t* cell29 = sortedlist54->root;
           cell_t* tmp29  = NULL;
           while(cell29 != NULL) {
               tmp29 = cell29->next;
               free(cell29);
               cell29 = tmp29;
           }
           free(sortedlist54);
           DEBUG_FREE(sortedlist54->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist56 = func21(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist56->id);
      free(params0.data);
      sortedlist56->refC--;
      if(sortedlist56->refC == 0){
           cell_t* cell34 = sortedlist56->root;
           cell_t* tmp34  = NULL;
           while(cell34 != NULL) {
               tmp34 = cell34->next;
               free(cell34);
               cell34 = tmp34;
           }
           free(sortedlist56);
           DEBUG_FREE(sortedlist56->id);
      }
   }
   sortedlist_t* sortedlist65;
   if (pCounter > 0) {
      sortedlist65 = vars->data[--pCounter];
      sortedlist65->refC++;
      DEBUG_COPY(sortedlist65->id);
   } else {
      sortedlist65 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist65->refC = 1;
      sortedlist65->id = 65;
      sortedlist65->n = 0;
      sortedlist65->root = NULL;
      DEBUG_NEW(sortedlist65->id);
   }
   return sortedlist65;
}


```
```func2.c
#include "sortedlist6_19.h" 
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist69;
   if (pCounter > 0) {
      sortedlist69 = vars->data[--pCounter];
      sortedlist69->refC++;
      DEBUG_COPY(sortedlist69->id);
   } else {
      sortedlist69 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist69->refC = 1;
      sortedlist69->id = 69;
      sortedlist69->n = 0;
      sortedlist69->root = NULL;
      DEBUG_NEW(sortedlist69->id);
   }
   unsigned int loop11 = 0;
   unsigned int loopLimit11 = (rand()%loopsFactor)/2 + 1;
   for(; loop11 < loopLimit11; loop11++) {
      if(sortedlist69 != NULL && sortedlist69->n > 0)
      {
          cell_t* cell38 = sortedlist69->root;
          if(cell38->val == 98)
          {
              cell38 = cell38->next;
              sortedlist69->n--;
          }else{
              while(cell38->next != NULL && cell38->next->val != 98) cell38 = cell38->next;
              if(cell38->next != NULL)
              {
                  cell38 = cell38->next->next;
                  sortedlist69->n--;
              }
           }
      }
   }
   return sortedlist69;
}


```
```func20.c
#include "sortedlist6_19.h" 
sortedlist_t* func20(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist55;
   if (pCounter > 0) {
      sortedlist55 = vars->data[--pCounter];
      sortedlist55->refC++;
      DEBUG_COPY(sortedlist55->id);
   } else {
      sortedlist55 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist55->refC = 1;
      sortedlist55->id = 55;
      sortedlist55->n = 0;
      sortedlist55->root = NULL;
      DEBUG_NEW(sortedlist55->id);
   }
   unsigned int loop9 = 0;
   unsigned int loopLimit9 = (rand()%loopsFactor)/2 + 1;
   for(; loop9 < loopLimit9; loop9++) {
      if(sortedlist55 != NULL && sortedlist55->n > 0)
      {
          cell_t* cell28 = sortedlist55->root;
          if(cell28->val == 58)
          {
              cell28 = cell28->next;
              sortedlist55->n--;
          }else{
              while(cell28->next != NULL && cell28->next->val != 58) cell28 = cell28->next;
              if(cell28->next != NULL)
              {
                  cell28 = cell28->next->next;
                  sortedlist55->n--;
              }
           }
      }
   }
   return sortedlist55;
}


```
```func21.c
#include "sortedlist6_19.h" 
sortedlist_t* func21(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist57 = func25(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist57->id);
   free(params0.data);
   return sortedlist57;
}


```
```func22.c
#include "sortedlist6_19.h" 
sortedlist_t* func22(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist23 = func23(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist23->id);
      free(params0.data);
      sortedlist23->refC--;
      if(sortedlist23->refC == 0){
           cell_t* cell11 = sortedlist23->root;
           cell_t* tmp11  = NULL;
           while(cell11 != NULL) {
               tmp11 = cell11->next;
               free(cell11);
               cell11 = tmp11;
           }
           free(sortedlist23);
           DEBUG_FREE(sortedlist23->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist25 = func24(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist25->id);
      free(params0.data);
      sortedlist25->refC--;
      if(sortedlist25->refC == 0){
           cell_t* cell17 = sortedlist25->root;
           cell_t* tmp17  = NULL;
           while(cell17 != NULL) {
               tmp17 = cell17->next;
               free(cell17);
               cell17 = tmp17;
           }
           free(sortedlist25);
           DEBUG_FREE(sortedlist25->id);
      }
   }
   sortedlist_t* sortedlist38;
   if (pCounter > 0) {
      sortedlist38 = vars->data[--pCounter];
      sortedlist38->refC++;
      DEBUG_COPY(sortedlist38->id);
   } else {
      sortedlist38 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist38->refC = 1;
      sortedlist38->id = 38;
      sortedlist38->n = 0;
      sortedlist38->root = NULL;
      DEBUG_NEW(sortedlist38->id);
   }
   return sortedlist38;
}


```
```func23.c
#include "sortedlist6_19.h" 
sortedlist_t* func23(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist24;
   if (pCounter > 0) {
      sortedlist24 = vars->data[--pCounter];
      sortedlist24->refC++;
      DEBUG_COPY(sortedlist24->id);
   } else {
      sortedlist24 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist24->refC = 1;
      sortedlist24->id = 24;
      sortedlist24->n = 0;
      sortedlist24->root = NULL;
      DEBUG_NEW(sortedlist24->id);
   }
   unsigned int loop5 = 0;
   unsigned int loopLimit5 = (rand()%loopsFactor)/3 + 1;
   for(; loop5 < loopLimit5; loop5++) {
      if(sortedlist24 != NULL && sortedlist24->n > 0)
      {
          cell_t* cell10 = sortedlist24->root;
          if(cell10->val == 59)
          {
              cell10 = cell10->next;
              sortedlist24->n--;
          }else{
              while(cell10->next != NULL && cell10->next->val != 59) cell10 = cell10->next;
              if(cell10->next != NULL)
              {
                  cell10 = cell10->next->next;
                  sortedlist24->n--;
              }
           }
      }
   }
   return sortedlist24;
}


```
```func24.c
#include "sortedlist6_19.h" 
sortedlist_t* func24(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist26 = func31(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist26->id);
   free(params0.data);
   return sortedlist26;
}


```
```func25.c
#include "sortedlist6_19.h" 
sortedlist_t* func25(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist58 = func26(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist58->id);
      free(params0.data);
      sortedlist58->refC--;
      if(sortedlist58->refC == 0){
           cell_t* cell32 = sortedlist58->root;
           cell_t* tmp32  = NULL;
           while(cell32 != NULL) {
               tmp32 = cell32->next;
               free(cell32);
               cell32 = tmp32;
           }
           free(sortedlist58);
           DEBUG_FREE(sortedlist58->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist62 = func27(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist62->id);
      free(params0.data);
      sortedlist62->refC--;
      if(sortedlist62->refC == 0){
           cell_t* cell33 = sortedlist62->root;
           cell_t* tmp33  = NULL;
           while(cell33 != NULL) {
               tmp33 = cell33->next;
               free(cell33);
               cell33 = tmp33;
           }
           free(sortedlist62);
           DEBUG_FREE(sortedlist62->id);
      }
   }
   sortedlist_t* sortedlist64;
   if (pCounter > 0) {
      sortedlist64 = vars->data[--pCounter];
      sortedlist64->refC++;
      DEBUG_COPY(sortedlist64->id);
   } else {
      sortedlist64 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist64->refC = 1;
      sortedlist64->id = 64;
      sortedlist64->n = 0;
      sortedlist64->root = NULL;
      DEBUG_NEW(sortedlist64->id);
   }
   return sortedlist64;
}


```
```func26.c
#include "sortedlist6_19.h" 
sortedlist_t* func26(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop10 = 0;
   unsigned int loopLimit10 = (rand()%loopsFactor)/2 + 1;
   for(; loop10 < loopLimit10; loop10++) {
      sortedlist_t* sortedlist59;
      if (pCounter > 0) {
         sortedlist59 = vars->data[--pCounter];
         sortedlist59->refC++;
         DEBUG_COPY(sortedlist59->id);
      } else {
         sortedlist59 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist59->refC = 1;
         sortedlist59->id = 59;
         sortedlist59->n = 0;
         sortedlist59->root = NULL;
         DEBUG_NEW(sortedlist59->id);
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist59;
      sortedlist_t* sortedlist60 = func37(&params0, rng(), loopsFactor);
      DEBUG_RETURN(sortedlist60->id);
      free(params0.data);
      sortedlist60->refC--;
      if(sortedlist60->refC == 0){
           cell_t* cell30 = sortedlist60->root;
           cell_t* tmp30  = NULL;
           while(cell30 != NULL) {
               tmp30 = cell30->next;
               free(cell30);
               cell30 = tmp30;
           }
           free(sortedlist60);
           DEBUG_FREE(sortedlist60->id);
      }
      sortedlist59->refC--;
      if(sortedlist59->refC == 0){
           cell_t* cell31 = sortedlist59->root;
           cell_t* tmp31  = NULL;
           while(cell31 != NULL) {
               tmp31 = cell31->next;
               free(cell31);
               cell31 = tmp31;
           }
           free(sortedlist59);
           DEBUG_FREE(sortedlist59->id);
      }
   }
   sortedlist_t* sortedlist61;
   if (pCounter > 0) {
      sortedlist61 = vars->data[--pCounter];
      sortedlist61->refC++;
      DEBUG_COPY(sortedlist61->id);
   } else {
      sortedlist61 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist61->refC = 1;
      sortedlist61->id = 61;
      sortedlist61->n = 0;
      sortedlist61->root = NULL;
      DEBUG_NEW(sortedlist61->id);
   }
   return sortedlist61;
}


```
```func27.c
#include "sortedlist6_19.h" 
sortedlist_t* func27(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist63 = func28(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist63->id);
   free(params0.data);
   return sortedlist63;
}


```
```func28.c
#include "sortedlist6_19.h" 
sortedlist_t* func28(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist10 = func29(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist10->id);
      free(params0.data);
      sortedlist10->refC--;
      if(sortedlist10->refC == 0){
           cell_t* cell3 = sortedlist10->root;
           cell_t* tmp3  = NULL;
           while(cell3 != NULL) {
               tmp3 = cell3->next;
               free(cell3);
               cell3 = tmp3;
           }
           free(sortedlist10);
           DEBUG_FREE(sortedlist10->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist12 = func30(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist12->id);
      free(params0.data);
      sortedlist12->refC--;
      if(sortedlist12->refC == 0){
           cell_t* cell6 = sortedlist12->root;
           cell_t* tmp6  = NULL;
           while(cell6 != NULL) {
               tmp6 = cell6->next;
               free(cell6);
               cell6 = tmp6;
           }
           free(sortedlist12);
           DEBUG_FREE(sortedlist12->id);
      }
   }
   sortedlist_t* sortedlist19;
   if (pCounter > 0) {
      sortedlist19 = vars->data[--pCounter];
      sortedlist19->refC++;
      DEBUG_COPY(sortedlist19->id);
   } else {
      sortedlist19 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist19->refC = 1;
      sortedlist19->id = 19;
      sortedlist19->n = 0;
      sortedlist19->root = NULL;
      DEBUG_NEW(sortedlist19->id);
   }
   return sortedlist19;
}


```
```func29.c
#include "sortedlist6_19.h" 
sortedlist_t* func29(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist11;
   if (pCounter > 0) {
      sortedlist11 = vars->data[--pCounter];
      sortedlist11->refC++;
      DEBUG_COPY(sortedlist11->id);
   } else {
      sortedlist11 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist11->refC = 1;
      sortedlist11->id = 11;
      sortedlist11->n = 0;
      sortedlist11->root = NULL;
      DEBUG_NEW(sortedlist11->id);
   }
   unsigned int loop4 = 0;
   unsigned int loopLimit4 = (rand()%loopsFactor)/4 + 1;
   for(; loop4 < loopLimit4; loop4++) {
      if(sortedlist11 != NULL && sortedlist11->n > 0)
      {
          cell_t* cell2 = sortedlist11->root;
          if(cell2->val == 93)
          {
              cell2 = cell2->next;
              sortedlist11->n--;
          }else{
              while(cell2->next != NULL && cell2->next->val != 93) cell2 = cell2->next;
              if(cell2->next != NULL)
              {
                  cell2 = cell2->next->next;
                  sortedlist11->n--;
              }
           }
      }
   }
   return sortedlist11;
}


```
```func3.c
#include "sortedlist6_19.h" 
sortedlist_t* func3(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist71 = func7(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist71->id);
   free(params0.data);
   return sortedlist71;
}


```
```func30.c
#include "sortedlist6_19.h" 
sortedlist_t* func30(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist13 = func34(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist13->id);
   free(params0.data);
   return sortedlist13;
}


```
```func31.c
#include "sortedlist6_19.h" 
sortedlist_t* func31(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist27 = func32(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist27->id);
      free(params0.data);
      sortedlist27->refC--;
      if(sortedlist27->refC == 0){
           cell_t* cell13 = sortedlist27->root;
           cell_t* tmp13  = NULL;
           while(cell13 != NULL) {
               tmp13 = cell13->next;
               free(cell13);
               cell13 = tmp13;
           }
           free(sortedlist27);
           DEBUG_FREE(sortedlist27->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist30 = func33(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist30->id);
      free(params0.data);
      sortedlist30->refC--;
      if(sortedlist30->refC == 0){
           cell_t* cell16 = sortedlist30->root;
           cell_t* tmp16  = NULL;
           while(cell16 != NULL) {
               tmp16 = cell16->next;
               free(cell16);
               cell16 = tmp16;
           }
           free(sortedlist30);
           DEBUG_FREE(sortedlist30->id);
      }
   }
   sortedlist_t* sortedlist37;
   if (pCounter > 0) {
      sortedlist37 = vars->data[--pCounter];
      sortedlist37->refC++;
      DEBUG_COPY(sortedlist37->id);
   } else {
      sortedlist37 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist37->refC = 1;
      sortedlist37->id = 37;
      sortedlist37->n = 0;
      sortedlist37->root = NULL;
      DEBUG_NEW(sortedlist37->id);
   }
   return sortedlist37;
}


```
```func32.c
#include "sortedlist6_19.h" 
sortedlist_t* func32(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop6 = 0;
   unsigned int loopLimit6 = (rand()%loopsFactor)/3 + 1;
   for(; loop6 < loopLimit6; loop6++) {
      sortedlist_t* sortedlist28;
      if (pCounter > 0) {
         sortedlist28 = vars->data[--pCounter];
         sortedlist28->refC++;
         DEBUG_COPY(sortedlist28->id);
      } else {
         sortedlist28 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist28->refC = 1;
         sortedlist28->id = 28;
         sortedlist28->n = 0;
         sortedlist28->root = NULL;
         DEBUG_NEW(sortedlist28->id);
      }
      sortedlist28->refC--;
      if(sortedlist28->refC == 0){
           cell_t* cell12 = sortedlist28->root;
           cell_t* tmp12  = NULL;
           while(cell12 != NULL) {
               tmp12 = cell12->next;
               free(cell12);
               cell12 = tmp12;
           }
           free(sortedlist28);
           DEBUG_FREE(sortedlist28->id);
      }
   }
   sortedlist_t* sortedlist29;
   if (pCounter > 0) {
      sortedlist29 = vars->data[--pCounter];
      sortedlist29->refC++;
      DEBUG_COPY(sortedlist29->id);
   } else {
      sortedlist29 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist29->refC = 1;
      sortedlist29->id = 29;
      sortedlist29->n = 0;
      sortedlist29->root = NULL;
      DEBUG_NEW(sortedlist29->id);
   }
   return sortedlist29;
}


```
```func33.c
#include "sortedlist6_19.h" 
sortedlist_t* func33(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist31 = func37(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist31->id);
   free(params0.data);
   return sortedlist31;
}


```
```func34.c
#include "sortedlist6_19.h" 
sortedlist_t* func34(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist14 = func35(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist14->id);
      free(params0.data);
      sortedlist14->refC--;
      if(sortedlist14->refC == 0){
           cell_t* cell4 = sortedlist14->root;
           cell_t* tmp4  = NULL;
           while(cell4 != NULL) {
               tmp4 = cell4->next;
               free(cell4);
               cell4 = tmp4;
           }
           free(sortedlist14);
           DEBUG_FREE(sortedlist14->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist16 = func36(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist16->id);
      free(params0.data);
      sortedlist16->refC--;
      if(sortedlist16->refC == 0){
           cell_t* cell5 = sortedlist16->root;
           cell_t* tmp5  = NULL;
           while(cell5 != NULL) {
               tmp5 = cell5->next;
               free(cell5);
               cell5 = tmp5;
           }
           free(sortedlist16);
           DEBUG_FREE(sortedlist16->id);
      }
   }
   sortedlist_t* sortedlist18;
   if (pCounter > 0) {
      sortedlist18 = vars->data[--pCounter];
      sortedlist18->refC++;
      DEBUG_COPY(sortedlist18->id);
   } else {
      sortedlist18 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist18->refC = 1;
      sortedlist18->id = 18;
      sortedlist18->n = 0;
      sortedlist18->root = NULL;
      DEBUG_NEW(sortedlist18->id);
   }
   return sortedlist18;
}


```
```func35.c
#include "sortedlist6_19.h" 
sortedlist_t* func35(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist15;
   if (pCounter > 0) {
      sortedlist15 = vars->data[--pCounter];
      sortedlist15->refC++;
      DEBUG_COPY(sortedlist15->id);
   } else {
      sortedlist15 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist15->refC = 1;
      sortedlist15->id = 15;
      sortedlist15->n = 0;
      sortedlist15->root = NULL;
      DEBUG_NEW(sortedlist15->id);
   }
   return sortedlist15;
}


```
```func36.c
#include "sortedlist6_19.h" 
sortedlist_t* func36(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist17;
   if (pCounter > 0) {
      sortedlist17 = vars->data[--pCounter];
      sortedlist17->refC++;
      DEBUG_COPY(sortedlist17->id);
   } else {
      sortedlist17 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist17->refC = 1;
      sortedlist17->id = 17;
      sortedlist17->n = 0;
      sortedlist17->root = NULL;
      DEBUG_NEW(sortedlist17->id);
   }
   return sortedlist17;
}


```
```func37.c
#include "sortedlist6_19.h" 
sortedlist_t* func37(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist32 = func38(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist32->id);
      free(params0.data);
      sortedlist32->refC--;
      if(sortedlist32->refC == 0){
           cell_t* cell14 = sortedlist32->root;
           cell_t* tmp14  = NULL;
           while(cell14 != NULL) {
               tmp14 = cell14->next;
               free(cell14);
               cell14 = tmp14;
           }
           free(sortedlist32);
           DEBUG_FREE(sortedlist32->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist34 = func39(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist34->id);
      free(params0.data);
      sortedlist34->refC--;
      if(sortedlist34->refC == 0){
           cell_t* cell15 = sortedlist34->root;
           cell_t* tmp15  = NULL;
           while(cell15 != NULL) {
               tmp15 = cell15->next;
               free(cell15);
               cell15 = tmp15;
           }
           free(sortedlist34);
           DEBUG_FREE(sortedlist34->id);
      }
   }
   sortedlist_t* sortedlist36;
   if (pCounter > 0) {
      sortedlist36 = vars->data[--pCounter];
      sortedlist36->refC++;
      DEBUG_COPY(sortedlist36->id);
   } else {
      sortedlist36 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist36->refC = 1;
      sortedlist36->id = 36;
      sortedlist36->n = 0;
      sortedlist36->root = NULL;
      DEBUG_NEW(sortedlist36->id);
   }
   return sortedlist36;
}


```
```func38.c
#include "sortedlist6_19.h" 
sortedlist_t* func38(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist33;
   if (pCounter > 0) {
      sortedlist33 = vars->data[--pCounter];
      sortedlist33->refC++;
      DEBUG_COPY(sortedlist33->id);
   } else {
      sortedlist33 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist33->refC = 1;
      sortedlist33->id = 33;
      sortedlist33->n = 0;
      sortedlist33->root = NULL;
      DEBUG_NEW(sortedlist33->id);
   }
   return sortedlist33;
}


```
```func39.c
#include "sortedlist6_19.h" 
sortedlist_t* func39(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist35;
   if (pCounter > 0) {
      sortedlist35 = vars->data[--pCounter];
      sortedlist35->refC++;
      DEBUG_COPY(sortedlist35->id);
   } else {
      sortedlist35 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist35->refC = 1;
      sortedlist35->id = 35;
      sortedlist35->n = 0;
      sortedlist35->root = NULL;
      DEBUG_NEW(sortedlist35->id);
   }
   return sortedlist35;
}


```
```func4.c
#include "sortedlist6_19.h" 
sortedlist_t* func4(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist44 = func5(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist44->id);
      free(params0.data);
      sortedlist44->refC--;
      if(sortedlist44->refC == 0){
           cell_t* cell24 = sortedlist44->root;
           cell_t* tmp24  = NULL;
           while(cell24 != NULL) {
               tmp24 = cell24->next;
               free(cell24);
               cell24 = tmp24;
           }
           free(sortedlist44);
           DEBUG_FREE(sortedlist44->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist46 = func6(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist46->id);
      free(params0.data);
      sortedlist46->refC--;
      if(sortedlist46->refC == 0){
           cell_t* cell36 = sortedlist46->root;
           cell_t* tmp36  = NULL;
           while(cell36 != NULL) {
               tmp36 = cell36->next;
               free(cell36);
               cell36 = tmp36;
           }
           free(sortedlist46);
           DEBUG_FREE(sortedlist46->id);
      }
   }
   sortedlist_t* sortedlist67;
   if (pCounter > 0) {
      sortedlist67 = vars->data[--pCounter];
      sortedlist67->refC++;
      DEBUG_COPY(sortedlist67->id);
   } else {
      sortedlist67 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist67->refC = 1;
      sortedlist67->id = 67;
      sortedlist67->n = 0;
      sortedlist67->root = NULL;
      DEBUG_NEW(sortedlist67->id);
   }
   return sortedlist67;
}


```
```func5.c
#include "sortedlist6_19.h" 
sortedlist_t* func5(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist45;
   if (pCounter > 0) {
      sortedlist45 = vars->data[--pCounter];
      sortedlist45->refC++;
      DEBUG_COPY(sortedlist45->id);
   } else {
      sortedlist45 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist45->refC = 1;
      sortedlist45->id = 45;
      sortedlist45->n = 0;
      sortedlist45->root = NULL;
      DEBUG_NEW(sortedlist45->id);
   }
   unsigned int loop7 = 0;
   unsigned int loopLimit7 = (rand()%loopsFactor)/2 + 1;
   for(; loop7 < loopLimit7; loop7++) {
      if(sortedlist45 != NULL && sortedlist45->n > 0)
      {
          cell_t* cell23 = sortedlist45->root;
          if(cell23->val == 35)
          {
              cell23 = cell23->next;
              sortedlist45->n--;
          }else{
              while(cell23->next != NULL && cell23->next->val != 35) cell23 = cell23->next;
              if(cell23->next != NULL)
              {
                  cell23 = cell23->next->next;
                  sortedlist45->n--;
              }
           }
      }
   }
   return sortedlist45;
}


```
```func6.c
#include "sortedlist6_19.h" 
sortedlist_t* func6(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist47 = func13(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist47->id);
   free(params0.data);
   return sortedlist47;
}


```
```func7.c
#include "sortedlist6_19.h" 
sortedlist_t* func7(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist72 = func8(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist72->id);
      free(params0.data);
      sortedlist72->refC--;
      if(sortedlist72->refC == 0){
           cell_t* cell42 = sortedlist72->root;
           cell_t* tmp42  = NULL;
           while(cell42 != NULL) {
               tmp42 = cell42->next;
               free(cell42);
               cell42 = tmp42;
           }
           free(sortedlist72);
           DEBUG_FREE(sortedlist72->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist76 = func9(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist76->id);
      free(params0.data);
      sortedlist76->refC--;
      if(sortedlist76->refC == 0){
           cell_t* cell43 = sortedlist76->root;
           cell_t* tmp43  = NULL;
           while(cell43 != NULL) {
               tmp43 = cell43->next;
               free(cell43);
               cell43 = tmp43;
           }
           free(sortedlist76);
           DEBUG_FREE(sortedlist76->id);
      }
   }
   sortedlist_t* sortedlist78;
   if (pCounter > 0) {
      sortedlist78 = vars->data[--pCounter];
      sortedlist78->refC++;
      DEBUG_COPY(sortedlist78->id);
   } else {
      sortedlist78 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist78->refC = 1;
      sortedlist78->id = 78;
      sortedlist78->n = 0;
      sortedlist78->root = NULL;
      DEBUG_NEW(sortedlist78->id);
   }
   return sortedlist78;
}


```
```func8.c
#include "sortedlist6_19.h" 
sortedlist_t* func8(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop12 = 0;
   unsigned int loopLimit12 = (rand()%loopsFactor)/2 + 1;
   for(; loop12 < loopLimit12; loop12++) {
      sortedlist_t* sortedlist73;
      if (pCounter > 0) {
         sortedlist73 = vars->data[--pCounter];
         sortedlist73->refC++;
         DEBUG_COPY(sortedlist73->id);
      } else {
         sortedlist73 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist73->refC = 1;
         sortedlist73->id = 73;
         sortedlist73->n = 0;
         sortedlist73->root = NULL;
         DEBUG_NEW(sortedlist73->id);
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist73;
      sortedlist_t* sortedlist74 = func19(&params0, rng(), loopsFactor);
      DEBUG_RETURN(sortedlist74->id);
      free(params0.data);
      sortedlist74->refC--;
      if(sortedlist74->refC == 0){
           cell_t* cell40 = sortedlist74->root;
           cell_t* tmp40  = NULL;
           while(cell40 != NULL) {
               tmp40 = cell40->next;
               free(cell40);
               cell40 = tmp40;
           }
           free(sortedlist74);
           DEBUG_FREE(sortedlist74->id);
      }
      sortedlist73->refC--;
      if(sortedlist73->refC == 0){
           cell_t* cell41 = sortedlist73->root;
           cell_t* tmp41  = NULL;
           while(cell41 != NULL) {
               tmp41 = cell41->next;
               free(cell41);
               cell41 = tmp41;
           }
           free(sortedlist73);
           DEBUG_FREE(sortedlist73->id);
      }
   }
   sortedlist_t* sortedlist75;
   if (pCounter > 0) {
      sortedlist75 = vars->data[--pCounter];
      sortedlist75->refC++;
      DEBUG_COPY(sortedlist75->id);
   } else {
      sortedlist75 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist75->refC = 1;
      sortedlist75->id = 75;
      sortedlist75->n = 0;
      sortedlist75->root = NULL;
      DEBUG_NEW(sortedlist75->id);
   }
   return sortedlist75;
}


```
```func9.c
#include "sortedlist6_19.h" 
sortedlist_t* func9(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist77 = func10(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist77->id);
   free(params0.data);
   return sortedlist77;
}


```
```rng.c
#include "sortedlist6_19.h" 
unsigned long rng() {
   unsigned long n = rand();
   return (n << 32) | rand();
}


```
```sortedlist6_19.c
#include "sortedlist6_19.h"

int main(int argc, char** argv) {
   int loopsFactor = 100;
   srand(0);
   for (int i = 1; i < argc; i++) {
      if (strcmp(argv[i], "-path-seed") == 0) {
         i++;
         if (i < argc) {
            srand(atoi(argv[i]));
         }
      }
      else if (strcmp(argv[i], "-loops-factor") == 0) {
         i++;
         if (i < argc) {
            loopsFactor = atoi(argv[i]);
         }
      }
   }
   unsigned int loop0 = 0;
   unsigned int loopLimit0 = (rand()%loopsFactor)/1 + 1;
   for(; loop0 < loopLimit0; loop0++) {
      if(rng() & 1) {
         sortedlist_t_param params0;
         params0.size = 0;
         params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
         sortedlist_t* sortedlist0 = func0(&params0, loopsFactor);
         DEBUG_RETURN(sortedlist0->id);
         free(params0.data);
         sortedlist0->refC--;
         if(sortedlist0->refC == 0){
              cell_t* cell22 = sortedlist0->root;
              cell_t* tmp22  = NULL;
              while(cell22 != NULL) {
                  tmp22 = cell22->next;
                  free(cell22);
                  cell22 = tmp22;
              }
              free(sortedlist0);
              DEBUG_FREE(sortedlist0->id);
         }
      }
      else {
         sortedlist_t_param params0;
         params0.size = 0;
         params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
         sortedlist_t* sortedlist42 = func1(&params0, loopsFactor);
         DEBUG_RETURN(sortedlist42->id);
         free(params0.data);
         sortedlist42->refC--;
         if(sortedlist42->refC == 0){
              cell_t* cell37 = sortedlist42->root;
              cell_t* tmp37  = NULL;
              while(cell37 != NULL) {
                  tmp37 = cell37->next;
                  free(cell37);
                  cell37 = tmp37;
              }
              free(sortedlist42);
              DEBUG_FREE(sortedlist42->id);
         }
      }
      if(rng() & 1) {
         sortedlist_t_param params0;
         params0.size = 0;
         params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
         sortedlist_t* sortedlist68 = func2(&params0, loopsFactor);
         DEBUG_RETURN(sortedlist68->id);
         free(params0.data);
         sortedlist68->refC--;
         if(sortedlist68->refC == 0){
              cell_t* cell39 = sortedlist68->root;
              cell_t* tmp39  = NULL;
              while(cell39 != NULL) {
                  tmp39 = cell39->next;
                  free(cell39);
                  cell39 = tmp39;
              }
              free(sortedlist68);
              DEBUG_FREE(sortedlist68->id);
         }
      }
      else {
         sortedlist_t_param params0;
         params0.size = 0;
         params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
         sortedlist_t* sortedlist70 = func3(&params0, loopsFactor);
         DEBUG_RETURN(sortedlist70->id);
         free(params0.data);
         sortedlist70->refC--;
         if(sortedlist70->refC == 0){
              cell_t* cell44 = sortedlist70->root;
              cell_t* tmp44  = NULL;
              while(cell44 != NULL) {
                  tmp44 = cell44->next;
                  free(cell44);
                  cell44 = tmp44;
              }
              free(sortedlist70);
              DEBUG_FREE(sortedlist70->id);
         }
      }
   }
   return 0;
}


```
```sortedlist6_19.h
#ifndef sortedlist6_19
#define sortedlist6_19
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef DEBUG
    #define DEBUG_NEW(id) printf("[NEW]\t\tId %d created\n", id)
    #define DEBUG_COPY(id) printf("[COPY]\t\tId %d copied\n", id)
    #define DEBUG_RETURN(id) printf("[RETURN]\tId %d returned\n", id)
    #define DEBUG_FREE(id) printf("[FREE]\t\tId %d freed\n", id)
#else
    #define DEBUG_NEW(id)
    #define DEBUG_COPY(id)
    #define DEBUG_RETURN(id)
    #define DEBUG_FREE(id)
#endif
#include <stdbool.h>
#include "Dalloc.h"
typedef struct cell_t {
     struct cell_t* next;
     unsigned int val;
} cell_t;
typedef struct sortedlist_t {
     cell_t* root;
     size_t refC;
     int id;
     unsigned int n;
} sortedlist_t;
typedef struct {
   sortedlist_t** data;
   size_t size;
} sortedlist_t_param;

unsigned long rng();
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func10(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func11(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func12(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func16(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func17(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func28(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func29(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func30(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func34(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func35(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func36(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func18(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func22(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func23(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func24(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func31(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func32(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func33(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func37(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func38(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func39(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func4(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func5(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func6(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func13(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func14(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func15(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func19(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func20(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func21(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func25(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func26(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func27(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func3(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func7(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func8(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func9(sortedlist_t_param* vars, int loopsFactor);
#endif
```
