#include "sortedlist7_17.h" 
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist1;
   if (pCounter > 0) {
      sortedlist1 = vars->data[--pCounter];
      sortedlist1->refC++;
      DEBUG_COPY(sortedlist1->id);
   } else {
      sortedlist1 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist1->refC = 1;
      sortedlist1->id = 1;
      sortedlist1->n = 0;
      sortedlist1->root = NULL;
      DEBUG_NEW(sortedlist1->id);
   }
   unsigned int loop1 = 0;
   unsigned int loopLimit1 = (rand()%loopsFactor)/2 + 1;
   for(; loop1 < loopLimit1; loop1++) {
      if(sortedlist1 != NULL && sortedlist1->n > 0) {
           cell_t* cell0 = sortedlist1->root;
           if(sortedlist1->n == 0) {
               sortedlist1->root = (cell_t*)malloc(sizeof(cell_t));
               sortedlist1->root->val  = 86;
               sortedlist1->root->next = NULL;
               sortedlist1->n++;
           } else {
               while(cell0 != NULL)
               {
                   if(cell0->next == NULL && cell0->val < 86) {
                       cell0->next = (cell_t*)malloc(sizeof(cell_t));
                       cell0->next->next = NULL;
                       cell0->next->val  = 86;
                       sortedlist1->n++;
                       break;
                   } else if(86 < cell0->val) {
                       cell_t* tmp0 = cell0->next;
                       cell0->next = (cell_t*)malloc(sizeof(cell_t));
                       cell0->next->next = tmp0;
                       int tmp_val0 = cell0->val;
                       cell0->val = 86;
                       cell0->next->val = tmp_val0;
                       sortedlist1->n++;
                       break;
                   }
                   cell0 = cell0->next;
               }
           }
      }
   }
   return sortedlist1;
}


#include "sortedlist7_17.h" 
unsigned long rng() {
   unsigned long n = rand();
   return (n << 32) | rand();
}


#include "sortedlist7_17.h"

int main(int argc, char** argv) {
   int loopsFactor = 100;
   srand(0);
   for (int i = 1; i < argc; i++) {
      if (strcmp(argv[i], "-path-seed") == 0) {
         i++;
         if (i < argc) {
            srand(atoi(argv[i]));
         }
      }
      else if (strcmp(argv[i], "-loops-factor") == 0) {
         i++;
         if (i < argc) {
            loopsFactor = atoi(argv[i]);
         }
      }
   }
   unsigned int loop0 = 0;
   unsigned int loopLimit0 = (rand()%loopsFactor)/1 + 1;
   for(; loop0 < loopLimit0; loop0++) {
      if(rng() & 1) {
         sortedlist_t_param params0;
         params0.size = 0;
         params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
         sortedlist_t* sortedlist0 = func0(&params0, loopsFactor);
         DEBUG_RETURN(sortedlist0->id);
         free(params0.data);
         sortedlist0->refC--;
         if(sortedlist0->refC == 0){
              cell_t* cell1 = sortedlist0->root;
              cell_t* tmp1  = NULL;
              while(cell1 != NULL) {
                  tmp1 = cell1->next;
                  free(cell1);
                  cell1 = tmp1;
              }
              free(sortedlist0);
              DEBUG_FREE(sortedlist0->id);
         }
      }
      else {
      }
   }
   return 0;
}


#ifndef sortedlist7_17
#define sortedlist7_17
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef DEBUG
    #define DEBUG_NEW(id) printf("[NEW]\t\tId %d created\n", id)
    #define DEBUG_COPY(id) printf("[COPY]\t\tId %d copied\n", id)
    #define DEBUG_RETURN(id) printf("[RETURN]\tId %d returned\n", id)
    #define DEBUG_FREE(id) printf("[FREE]\t\tId %d freed\n", id)
#else
    #define DEBUG_NEW(id)
    #define DEBUG_COPY(id)
    #define DEBUG_RETURN(id)
    #define DEBUG_FREE(id)
#endif
#include <stdbool.h>
#include "Dalloc.h"
typedef struct cell_t {
     struct cell_t* next;
     unsigned int val;
} cell_t;
typedef struct sortedlist_t {
     cell_t* root;
     size_t refC;
     int id;
     unsigned int n;
} sortedlist_t;
typedef struct {
   sortedlist_t** data;
   size_t size;
} sortedlist_t_param;

unsigned long rng();
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor);
#endif
