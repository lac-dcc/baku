#include "sortedlist3_5.h" 
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop0 = 0;
   unsigned int loopLimit0 = (rand()%loopsFactor)/1 + 1;
   for(; loop0 < loopLimit0; loop0++) {
      sortedlist_t* sortedlist1;
      if (pCounter > 0) {
         sortedlist1 = vars->data[--pCounter];
         sortedlist1->refC++;
         DEBUG_COPY(sortedlist1->id);
      } else {
         sortedlist1 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist1->refC = 1;
         sortedlist1->id = 1;
         sortedlist1->n = 0;
         sortedlist1->root = NULL;
         DEBUG_NEW(sortedlist1->id);
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist1;
      sortedlist_t* sortedlist2 = func6(&params0, rng(), loopsFactor);
      DEBUG_RETURN(sortedlist2->id);
      free(params0.data);
      sortedlist2->refC--;
      if(sortedlist2->refC == 0){
           cell_t* cell3 = sortedlist2->root;
           cell_t* tmp3  = NULL;
           while(cell3 != NULL) {
               tmp3 = cell3->next;
               free(cell3);
               cell3 = tmp3;
           }
           free(sortedlist2);
           DEBUG_FREE(sortedlist2->id);
      }
      sortedlist1->refC--;
      if(sortedlist1->refC == 0){
           cell_t* cell4 = sortedlist1->root;
           cell_t* tmp4  = NULL;
           while(cell4 != NULL) {
               tmp4 = cell4->next;
               free(cell4);
               cell4 = tmp4;
           }
           free(sortedlist1);
           DEBUG_FREE(sortedlist1->id);
      }
   }
   sortedlist_t* sortedlist8;
   if (pCounter > 0) {
      sortedlist8 = vars->data[--pCounter];
      sortedlist8->refC++;
      DEBUG_COPY(sortedlist8->id);
   } else {
      sortedlist8 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist8->refC = 1;
      sortedlist8->id = 8;
      sortedlist8->n = 0;
      sortedlist8->root = NULL;
      DEBUG_NEW(sortedlist8->id);
   }
   return sortedlist8;
}


#include "sortedlist3_5.h" 
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist10 = func3(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist10->id);
   free(params0.data);
   return sortedlist10;
}


#include "sortedlist3_5.h" 
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist17;
   if (pCounter > 0) {
      sortedlist17 = vars->data[--pCounter];
      sortedlist17->refC++;
      DEBUG_COPY(sortedlist17->id);
   } else {
      sortedlist17 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist17->refC = 1;
      sortedlist17->id = 17;
      sortedlist17->n = 0;
      sortedlist17->root = NULL;
      DEBUG_NEW(sortedlist17->id);
   }
   unsigned int loop3 = 0;
   unsigned int loopLimit3 = (rand()%loopsFactor)/1 + 1;
   for(; loop3 < loopLimit3; loop3++) {
      if(sortedlist17 != NULL && sortedlist17->n > 0)
      {
          cell_t* cell8 = sortedlist17->root;
          if(cell8->val == 59)
          {
              cell8 = cell8->next;
              sortedlist17->n--;
          }else{
              while(cell8->next != NULL && cell8->next->val != 59) cell8 = cell8->next;
              if(cell8->next != NULL)
              {
                  cell8 = cell8->next->next;
                  sortedlist17->n--;
              }
           }
      }
   }
   return sortedlist17;
}


#include "sortedlist3_5.h" 
sortedlist_t* func3(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist11 = func4(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist11->id);
      free(params0.data);
      sortedlist11->refC--;
      if(sortedlist11->refC == 0){
           cell_t* cell6 = sortedlist11->root;
           cell_t* tmp6  = NULL;
           while(cell6 != NULL) {
               tmp6 = cell6->next;
               free(cell6);
               cell6 = tmp6;
           }
           free(sortedlist11);
           DEBUG_FREE(sortedlist11->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist13 = func5(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist13->id);
      free(params0.data);
      sortedlist13->refC--;
      if(sortedlist13->refC == 0){
           cell_t* cell7 = sortedlist13->root;
           cell_t* tmp7  = NULL;
           while(cell7 != NULL) {
               tmp7 = cell7->next;
               free(cell7);
               cell7 = tmp7;
           }
           free(sortedlist13);
           DEBUG_FREE(sortedlist13->id);
      }
   }
   sortedlist_t* sortedlist15;
   if (pCounter > 0) {
      sortedlist15 = vars->data[--pCounter];
      sortedlist15->refC++;
      DEBUG_COPY(sortedlist15->id);
   } else {
      sortedlist15 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist15->refC = 1;
      sortedlist15->id = 15;
      sortedlist15->n = 0;
      sortedlist15->root = NULL;
      DEBUG_NEW(sortedlist15->id);
   }
   return sortedlist15;
}


#include "sortedlist3_5.h" 
sortedlist_t* func4(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist12;
   if (pCounter > 0) {
      sortedlist12 = vars->data[--pCounter];
      sortedlist12->refC++;
      DEBUG_COPY(sortedlist12->id);
   } else {
      sortedlist12 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist12->refC = 1;
      sortedlist12->id = 12;
      sortedlist12->n = 0;
      sortedlist12->root = NULL;
      DEBUG_NEW(sortedlist12->id);
   }
   unsigned int loop2 = 0;
   unsigned int loopLimit2 = (rand()%loopsFactor)/1 + 1;
   for(; loop2 < loopLimit2; loop2++) {
      if(sortedlist12 != NULL && sortedlist12->n > 0)
      {
          cell_t* cell5 = sortedlist12->root;
          if(cell5->val == 92)
          {
              cell5 = cell5->next;
              sortedlist12->n--;
          }else{
              while(cell5->next != NULL && cell5->next->val != 92) cell5 = cell5->next;
              if(cell5->next != NULL)
              {
                  cell5 = cell5->next->next;
                  sortedlist12->n--;
              }
           }
      }
   }
   return sortedlist12;
}


#include "sortedlist3_5.h" 
sortedlist_t* func5(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist14;
   if (pCounter > 0) {
      sortedlist14 = vars->data[--pCounter];
      sortedlist14->refC++;
      DEBUG_COPY(sortedlist14->id);
   } else {
      sortedlist14 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist14->refC = 1;
      sortedlist14->id = 14;
      sortedlist14->n = 0;
      sortedlist14->root = NULL;
      DEBUG_NEW(sortedlist14->id);
   }
   return sortedlist14;
}


#include "sortedlist3_5.h" 
sortedlist_t* func6(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist3 = func7(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist3->id);
      free(params0.data);
      sortedlist3->refC--;
      if(sortedlist3->refC == 0){
           cell_t* cell1 = sortedlist3->root;
           cell_t* tmp1  = NULL;
           while(cell1 != NULL) {
               tmp1 = cell1->next;
               free(cell1);
               cell1 = tmp1;
           }
           free(sortedlist3);
           DEBUG_FREE(sortedlist3->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist5 = func8(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist5->id);
      free(params0.data);
      sortedlist5->refC--;
      if(sortedlist5->refC == 0){
           cell_t* cell2 = sortedlist5->root;
           cell_t* tmp2  = NULL;
           while(cell2 != NULL) {
               tmp2 = cell2->next;
               free(cell2);
               cell2 = tmp2;
           }
           free(sortedlist5);
           DEBUG_FREE(sortedlist5->id);
      }
   }
   sortedlist_t* sortedlist7;
   if (pCounter > 0) {
      sortedlist7 = vars->data[--pCounter];
      sortedlist7->refC++;
      DEBUG_COPY(sortedlist7->id);
   } else {
      sortedlist7 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist7->refC = 1;
      sortedlist7->id = 7;
      sortedlist7->n = 0;
      sortedlist7->root = NULL;
      DEBUG_NEW(sortedlist7->id);
   }
   return sortedlist7;
}


#include "sortedlist3_5.h" 
sortedlist_t* func7(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist4;
   if (pCounter > 0) {
      sortedlist4 = vars->data[--pCounter];
      sortedlist4->refC++;
      DEBUG_COPY(sortedlist4->id);
   } else {
      sortedlist4 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist4->refC = 1;
      sortedlist4->id = 4;
      sortedlist4->n = 0;
      sortedlist4->root = NULL;
      DEBUG_NEW(sortedlist4->id);
   }
   unsigned int loop1 = 0;
   unsigned int loopLimit1 = (rand()%loopsFactor)/2 + 1;
   for(; loop1 < loopLimit1; loop1++) {
      if(sortedlist4 != NULL && sortedlist4->n > 0)
      {
          cell_t* cell0 = sortedlist4->root;
          if(cell0->val == 86)
          {
              cell0 = cell0->next;
              sortedlist4->n--;
          }else{
              while(cell0->next != NULL && cell0->next->val != 86) cell0 = cell0->next;
              if(cell0->next != NULL)
              {
                  cell0 = cell0->next->next;
                  sortedlist4->n--;
              }
           }
      }
   }
   return sortedlist4;
}


#include "sortedlist3_5.h" 
sortedlist_t* func8(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist6;
   if (pCounter > 0) {
      sortedlist6 = vars->data[--pCounter];
      sortedlist6->refC++;
      DEBUG_COPY(sortedlist6->id);
   } else {
      sortedlist6 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist6->refC = 1;
      sortedlist6->id = 6;
      sortedlist6->n = 0;
      sortedlist6->root = NULL;
      DEBUG_NEW(sortedlist6->id);
   }
   return sortedlist6;
}


#include "sortedlist3_5.h" 
unsigned long rng() {
   unsigned long n = rand();
   return (n << 32) | rand();
}


#include "sortedlist3_5.h"

int main(int argc, char** argv) {
   int loopsFactor = 100;
   srand(0);
   for (int i = 1; i < argc; i++) {
      if (strcmp(argv[i], "-path-seed") == 0) {
         i++;
         if (i < argc) {
            srand(atoi(argv[i]));
         }
      }
      else if (strcmp(argv[i], "-loops-factor") == 0) {
         i++;
         if (i < argc) {
            loopsFactor = atoi(argv[i]);
         }
      }
   }
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist0 = func0(&params0, loopsFactor);
   DEBUG_RETURN(sortedlist0->id);
   free(params0.data);
   sortedlist_t_param params1;
   params1.size = 1;
   params1.data = (sortedlist_t**)malloc(params1.size*sizeof(sortedlist_t*));
   params1.data[0] = sortedlist0;
   sortedlist_t* sortedlist9 = func1(&params1, loopsFactor);
   DEBUG_RETURN(sortedlist9->id);
   free(params1.data);
   sortedlist_t_param params2;
   params2.size = 2;
   params2.data = (sortedlist_t**)malloc(params2.size*sizeof(sortedlist_t*));
   params2.data[0] = sortedlist0;
   params2.data[1] = sortedlist9;
   sortedlist_t* sortedlist16 = func2(&params2, loopsFactor);
   DEBUG_RETURN(sortedlist16->id);
   free(params2.data);
   sortedlist16->refC--;
   if(sortedlist16->refC == 0){
        cell_t* cell9 = sortedlist16->root;
        cell_t* tmp9  = NULL;
        while(cell9 != NULL) {
            tmp9 = cell9->next;
            free(cell9);
            cell9 = tmp9;
        }
        free(sortedlist16);
        DEBUG_FREE(sortedlist16->id);
   }
   sortedlist9->refC--;
   if(sortedlist9->refC == 0){
        cell_t* cell10 = sortedlist9->root;
        cell_t* tmp10  = NULL;
        while(cell10 != NULL) {
            tmp10 = cell10->next;
            free(cell10);
            cell10 = tmp10;
        }
        free(sortedlist9);
        DEBUG_FREE(sortedlist9->id);
   }
   sortedlist0->refC--;
   if(sortedlist0->refC == 0){
        cell_t* cell11 = sortedlist0->root;
        cell_t* tmp11  = NULL;
        while(cell11 != NULL) {
            tmp11 = cell11->next;
            free(cell11);
            cell11 = tmp11;
        }
        free(sortedlist0);
        DEBUG_FREE(sortedlist0->id);
   }
   return 0;
}


#ifndef sortedlist3_5
#define sortedlist3_5
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef DEBUG
    #define DEBUG_NEW(id) printf("[NEW]\t\tId %d created\n", id)
    #define DEBUG_COPY(id) printf("[COPY]\t\tId %d copied\n", id)
    #define DEBUG_RETURN(id) printf("[RETURN]\tId %d returned\n", id)
    #define DEBUG_FREE(id) printf("[FREE]\t\tId %d freed\n", id)
#else
    #define DEBUG_NEW(id)
    #define DEBUG_COPY(id)
    #define DEBUG_RETURN(id)
    #define DEBUG_FREE(id)
#endif
#include <stdbool.h>
#include "Dalloc.h"
typedef struct cell_t {
     struct cell_t* next;
     unsigned int val;
} cell_t;
typedef struct sortedlist_t {
     cell_t* root;
     size_t refC;
     int id;
     unsigned int n;
} sortedlist_t;
typedef struct {
   sortedlist_t** data;
   size_t size;
} sortedlist_t_param;

unsigned long rng();
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func6(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func7(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func8(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func3(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func4(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func5(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor);
#endif
