#include "sortedlist5_19.h" 
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop1 = 0;
   unsigned int loopLimit1 = (rand()%loopsFactor)/2 + 1;
   for(; loop1 < loopLimit1; loop1++) {
      sortedlist_t* sortedlist1;
      if (pCounter > 0) {
         sortedlist1 = vars->data[--pCounter];
         sortedlist1->refC++;
         DEBUG_COPY(sortedlist1->id);
      } else {
         sortedlist1 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist1->refC = 1;
         sortedlist1->id = 1;
         sortedlist1->n = 0;
         sortedlist1->root = NULL;
         DEBUG_NEW(sortedlist1->id);
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist1;
      sortedlist_t* sortedlist2 = func10(&params0, rng(), loopsFactor);
      DEBUG_RETURN(sortedlist2->id);
      free(params0.data);
      sortedlist2->refC--;
      if(sortedlist2->refC == 0){
           cell_t* cell14 = sortedlist2->root;
           cell_t* tmp14  = NULL;
           while(cell14 != NULL) {
               tmp14 = cell14->next;
               free(cell14);
               cell14 = tmp14;
           }
           free(sortedlist2);
           DEBUG_FREE(sortedlist2->id);
      }
      sortedlist1->refC--;
      if(sortedlist1->refC == 0){
           cell_t* cell15 = sortedlist1->root;
           cell_t* tmp15  = NULL;
           while(cell15 != NULL) {
               tmp15 = cell15->next;
               free(cell15);
               cell15 = tmp15;
           }
           free(sortedlist1);
           DEBUG_FREE(sortedlist1->id);
      }
   }
   sortedlist_t* sortedlist30;
   if (pCounter > 0) {
      sortedlist30 = vars->data[--pCounter];
      sortedlist30->refC++;
      DEBUG_COPY(sortedlist30->id);
   } else {
      sortedlist30 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist30->refC = 1;
      sortedlist30->id = 30;
      sortedlist30->n = 0;
      sortedlist30->root = NULL;
      DEBUG_NEW(sortedlist30->id);
   }
   return sortedlist30;
}


#include "sortedlist5_19.h" 
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist32 = func4(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist32->id);
   free(params0.data);
   return sortedlist32;
}


#include "sortedlist5_19.h" 
sortedlist_t* func10(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist3 = func11(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist3->id);
      free(params0.data);
      sortedlist3->refC--;
      if(sortedlist3->refC == 0){
           cell_t* cell1 = sortedlist3->root;
           cell_t* tmp1  = NULL;
           while(cell1 != NULL) {
               tmp1 = cell1->next;
               free(cell1);
               cell1 = tmp1;
           }
           free(sortedlist3);
           DEBUG_FREE(sortedlist3->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist5 = func12(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist5->id);
      free(params0.data);
      sortedlist5->refC--;
      if(sortedlist5->refC == 0){
           cell_t* cell13 = sortedlist5->root;
           cell_t* tmp13  = NULL;
           while(cell13 != NULL) {
               tmp13 = cell13->next;
               free(cell13);
               cell13 = tmp13;
           }
           free(sortedlist5);
           DEBUG_FREE(sortedlist5->id);
      }
   }
   sortedlist_t* sortedlist29;
   if (pCounter > 0) {
      sortedlist29 = vars->data[--pCounter];
      sortedlist29->refC++;
      DEBUG_COPY(sortedlist29->id);
   } else {
      sortedlist29 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist29->refC = 1;
      sortedlist29->id = 29;
      sortedlist29->n = 0;
      sortedlist29->root = NULL;
      DEBUG_NEW(sortedlist29->id);
   }
   return sortedlist29;
}


#include "sortedlist5_19.h" 
sortedlist_t* func11(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist4;
   if (pCounter > 0) {
      sortedlist4 = vars->data[--pCounter];
      sortedlist4->refC++;
      DEBUG_COPY(sortedlist4->id);
   } else {
      sortedlist4 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist4->refC = 1;
      sortedlist4->id = 4;
      sortedlist4->n = 0;
      sortedlist4->root = NULL;
      DEBUG_NEW(sortedlist4->id);
   }
   unsigned int loop2 = 0;
   unsigned int loopLimit2 = (rand()%loopsFactor)/3 + 1;
   for(; loop2 < loopLimit2; loop2++) {
      if(sortedlist4 != NULL && sortedlist4->n > 0)
      {
          cell_t* cell0 = sortedlist4->root;
          if(cell0->val == 86)
          {
              cell0 = cell0->next;
              sortedlist4->n--;
          }else{
              while(cell0->next != NULL && cell0->next->val != 86) cell0 = cell0->next;
              if(cell0->next != NULL)
              {
                  cell0 = cell0->next->next;
                  sortedlist4->n--;
              }
           }
      }
   }
   return sortedlist4;
}


#include "sortedlist5_19.h" 
sortedlist_t* func12(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist6 = func16(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist6->id);
   free(params0.data);
   return sortedlist6;
}


#include "sortedlist5_19.h" 
sortedlist_t* func13(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist37 = func14(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist37->id);
      free(params0.data);
      sortedlist37->refC--;
      if(sortedlist37->refC == 0){
           cell_t* cell21 = sortedlist37->root;
           cell_t* tmp21  = NULL;
           while(cell21 != NULL) {
               tmp21 = cell21->next;
               free(cell21);
               cell21 = tmp21;
           }
           free(sortedlist37);
           DEBUG_FREE(sortedlist37->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist41 = func15(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist41->id);
      free(params0.data);
      sortedlist41->refC--;
      if(sortedlist41->refC == 0){
           cell_t* cell28 = sortedlist41->root;
           cell_t* tmp28  = NULL;
           while(cell28 != NULL) {
               tmp28 = cell28->next;
               free(cell28);
               cell28 = tmp28;
           }
           free(sortedlist41);
           DEBUG_FREE(sortedlist41->id);
      }
   }
   sortedlist_t* sortedlist54;
   if (pCounter > 0) {
      sortedlist54 = vars->data[--pCounter];
      sortedlist54->refC++;
      DEBUG_COPY(sortedlist54->id);
   } else {
      sortedlist54 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist54->refC = 1;
      sortedlist54->id = 54;
      sortedlist54->n = 0;
      sortedlist54->root = NULL;
      DEBUG_NEW(sortedlist54->id);
   }
   return sortedlist54;
}


#include "sortedlist5_19.h" 
sortedlist_t* func14(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop6 = 0;
   unsigned int loopLimit6 = (rand()%loopsFactor)/2 + 1;
   for(; loop6 < loopLimit6; loop6++) {
      sortedlist_t* sortedlist38;
      if (pCounter > 0) {
         sortedlist38 = vars->data[--pCounter];
         sortedlist38->refC++;
         DEBUG_COPY(sortedlist38->id);
      } else {
         sortedlist38 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist38->refC = 1;
         sortedlist38->id = 38;
         sortedlist38->n = 0;
         sortedlist38->root = NULL;
         DEBUG_NEW(sortedlist38->id);
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist38;
      sortedlist_t* sortedlist39 = func22(&params0, rng(), loopsFactor);
      DEBUG_RETURN(sortedlist39->id);
      free(params0.data);
      sortedlist39->refC--;
      if(sortedlist39->refC == 0){
           cell_t* cell19 = sortedlist39->root;
           cell_t* tmp19  = NULL;
           while(cell19 != NULL) {
               tmp19 = cell19->next;
               free(cell19);
               cell19 = tmp19;
           }
           free(sortedlist39);
           DEBUG_FREE(sortedlist39->id);
      }
      sortedlist38->refC--;
      if(sortedlist38->refC == 0){
           cell_t* cell20 = sortedlist38->root;
           cell_t* tmp20  = NULL;
           while(cell20 != NULL) {
               tmp20 = cell20->next;
               free(cell20);
               cell20 = tmp20;
           }
           free(sortedlist38);
           DEBUG_FREE(sortedlist38->id);
      }
   }
   sortedlist_t* sortedlist40;
   if (pCounter > 0) {
      sortedlist40 = vars->data[--pCounter];
      sortedlist40->refC++;
      DEBUG_COPY(sortedlist40->id);
   } else {
      sortedlist40 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist40->refC = 1;
      sortedlist40->id = 40;
      sortedlist40->n = 0;
      sortedlist40->root = NULL;
      DEBUG_NEW(sortedlist40->id);
   }
   return sortedlist40;
}


#include "sortedlist5_19.h" 
sortedlist_t* func15(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist42 = func19(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist42->id);
   free(params0.data);
   return sortedlist42;
}


#include "sortedlist5_19.h" 
sortedlist_t* func16(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist7 = func17(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist7->id);
      free(params0.data);
      sortedlist7->refC--;
      if(sortedlist7->refC == 0){
           cell_t* cell6 = sortedlist7->root;
           cell_t* tmp6  = NULL;
           while(cell6 != NULL) {
               tmp6 = cell6->next;
               free(cell6);
               cell6 = tmp6;
           }
           free(sortedlist7);
           DEBUG_FREE(sortedlist7->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist16 = func18(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist16->id);
      free(params0.data);
      sortedlist16->refC--;
      if(sortedlist16->refC == 0){
           cell_t* cell12 = sortedlist16->root;
           cell_t* tmp12  = NULL;
           while(cell12 != NULL) {
               tmp12 = cell12->next;
               free(cell12);
               cell12 = tmp12;
           }
           free(sortedlist16);
           DEBUG_FREE(sortedlist16->id);
      }
   }
   sortedlist_t* sortedlist28;
   if (pCounter > 0) {
      sortedlist28 = vars->data[--pCounter];
      sortedlist28->refC++;
      DEBUG_COPY(sortedlist28->id);
   } else {
      sortedlist28 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist28->refC = 1;
      sortedlist28->id = 28;
      sortedlist28->n = 0;
      sortedlist28->root = NULL;
      DEBUG_NEW(sortedlist28->id);
   }
   return sortedlist28;
}


#include "sortedlist5_19.h" 
sortedlist_t* func17(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop3 = 0;
   unsigned int loopLimit3 = (rand()%loopsFactor)/3 + 1;
   for(; loop3 < loopLimit3; loop3++) {
      sortedlist_t* sortedlist8;
      if (pCounter > 0) {
         sortedlist8 = vars->data[--pCounter];
         sortedlist8->refC++;
         DEBUG_COPY(sortedlist8->id);
      } else {
         sortedlist8 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist8->refC = 1;
         sortedlist8->id = 8;
         sortedlist8->n = 0;
         sortedlist8->root = NULL;
         DEBUG_NEW(sortedlist8->id);
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist8;
      sortedlist_t* sortedlist9 = func28(&params0, rng(), loopsFactor);
      DEBUG_RETURN(sortedlist9->id);
      free(params0.data);
      sortedlist9->refC--;
      if(sortedlist9->refC == 0){
           cell_t* cell4 = sortedlist9->root;
           cell_t* tmp4  = NULL;
           while(cell4 != NULL) {
               tmp4 = cell4->next;
               free(cell4);
               cell4 = tmp4;
           }
           free(sortedlist9);
           DEBUG_FREE(sortedlist9->id);
      }
      sortedlist8->refC--;
      if(sortedlist8->refC == 0){
           cell_t* cell5 = sortedlist8->root;
           cell_t* tmp5  = NULL;
           while(cell5 != NULL) {
               tmp5 = cell5->next;
               free(cell5);
               cell5 = tmp5;
           }
           free(sortedlist8);
           DEBUG_FREE(sortedlist8->id);
      }
   }
   sortedlist_t* sortedlist15;
   if (pCounter > 0) {
      sortedlist15 = vars->data[--pCounter];
      sortedlist15->refC++;
      DEBUG_COPY(sortedlist15->id);
   } else {
      sortedlist15 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist15->refC = 1;
      sortedlist15->id = 15;
      sortedlist15->n = 0;
      sortedlist15->root = NULL;
      DEBUG_NEW(sortedlist15->id);
   }
   return sortedlist15;
}


#include "sortedlist5_19.h" 
sortedlist_t* func18(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist17 = func22(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist17->id);
   free(params0.data);
   return sortedlist17;
}


#include "sortedlist5_19.h" 
sortedlist_t* func19(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist43 = func20(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist43->id);
      free(params0.data);
      sortedlist43->refC--;
      if(sortedlist43->refC == 0){
           cell_t* cell23 = sortedlist43->root;
           cell_t* tmp23  = NULL;
           while(cell23 != NULL) {
               tmp23 = cell23->next;
               free(cell23);
               cell23 = tmp23;
           }
           free(sortedlist43);
           DEBUG_FREE(sortedlist43->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist45 = func21(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist45->id);
      free(params0.data);
      sortedlist45->refC--;
      if(sortedlist45->refC == 0){
           cell_t* cell27 = sortedlist45->root;
           cell_t* tmp27  = NULL;
           while(cell27 != NULL) {
               tmp27 = cell27->next;
               free(cell27);
               cell27 = tmp27;
           }
           free(sortedlist45);
           DEBUG_FREE(sortedlist45->id);
      }
   }
   sortedlist_t* sortedlist53;
   if (pCounter > 0) {
      sortedlist53 = vars->data[--pCounter];
      sortedlist53->refC++;
      DEBUG_COPY(sortedlist53->id);
   } else {
      sortedlist53 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist53->refC = 1;
      sortedlist53->id = 53;
      sortedlist53->n = 0;
      sortedlist53->root = NULL;
      DEBUG_NEW(sortedlist53->id);
   }
   return sortedlist53;
}


#include "sortedlist5_19.h" 
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist57;
   if (pCounter > 0) {
      sortedlist57 = vars->data[--pCounter];
      sortedlist57->refC++;
      DEBUG_COPY(sortedlist57->id);
   } else {
      sortedlist57 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist57->refC = 1;
      sortedlist57->id = 57;
      sortedlist57->n = 0;
      sortedlist57->root = NULL;
      DEBUG_NEW(sortedlist57->id);
   }
   unsigned int loop9 = 0;
   unsigned int loopLimit9 = (rand()%loopsFactor)/2 + 1;
   for(; loop9 < loopLimit9; loop9++) {
      if(sortedlist57 != NULL && sortedlist57->n > 0)
      {
          cell_t* cell31 = sortedlist57->root;
          if(cell31->val == 11)
          {
              cell31 = cell31->next;
              sortedlist57->n--;
          }else{
              while(cell31->next != NULL && cell31->next->val != 11) cell31 = cell31->next;
              if(cell31->next != NULL)
              {
                  cell31 = cell31->next->next;
                  sortedlist57->n--;
              }
           }
      }
   }
   return sortedlist57;
}


#include "sortedlist5_19.h" 
sortedlist_t* func20(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist44;
   if (pCounter > 0) {
      sortedlist44 = vars->data[--pCounter];
      sortedlist44->refC++;
      DEBUG_COPY(sortedlist44->id);
   } else {
      sortedlist44 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist44->refC = 1;
      sortedlist44->id = 44;
      sortedlist44->n = 0;
      sortedlist44->root = NULL;
      DEBUG_NEW(sortedlist44->id);
   }
   unsigned int loop7 = 0;
   unsigned int loopLimit7 = (rand()%loopsFactor)/2 + 1;
   for(; loop7 < loopLimit7; loop7++) {
      if(sortedlist44 != NULL && sortedlist44->n > 0)
      {
          cell_t* cell22 = sortedlist44->root;
          if(cell22->val == 30)
          {
              cell22 = cell22->next;
              sortedlist44->n--;
          }else{
              while(cell22->next != NULL && cell22->next->val != 30) cell22 = cell22->next;
              if(cell22->next != NULL)
              {
                  cell22 = cell22->next->next;
                  sortedlist44->n--;
              }
           }
      }
   }
   return sortedlist44;
}


#include "sortedlist5_19.h" 
sortedlist_t* func21(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist46 = func25(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist46->id);
   free(params0.data);
   return sortedlist46;
}


#include "sortedlist5_19.h" 
sortedlist_t* func22(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist18 = func23(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist18->id);
      free(params0.data);
      sortedlist18->refC--;
      if(sortedlist18->refC == 0){
           cell_t* cell8 = sortedlist18->root;
           cell_t* tmp8  = NULL;
           while(cell8 != NULL) {
               tmp8 = cell8->next;
               free(cell8);
               cell8 = tmp8;
           }
           free(sortedlist18);
           DEBUG_FREE(sortedlist18->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist20 = func24(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist20->id);
      free(params0.data);
      sortedlist20->refC--;
      if(sortedlist20->refC == 0){
           cell_t* cell11 = sortedlist20->root;
           cell_t* tmp11  = NULL;
           while(cell11 != NULL) {
               tmp11 = cell11->next;
               free(cell11);
               cell11 = tmp11;
           }
           free(sortedlist20);
           DEBUG_FREE(sortedlist20->id);
      }
   }
   sortedlist_t* sortedlist27;
   if (pCounter > 0) {
      sortedlist27 = vars->data[--pCounter];
      sortedlist27->refC++;
      DEBUG_COPY(sortedlist27->id);
   } else {
      sortedlist27 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist27->refC = 1;
      sortedlist27->id = 27;
      sortedlist27->n = 0;
      sortedlist27->root = NULL;
      DEBUG_NEW(sortedlist27->id);
   }
   return sortedlist27;
}


#include "sortedlist5_19.h" 
sortedlist_t* func23(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist19;
   if (pCounter > 0) {
      sortedlist19 = vars->data[--pCounter];
      sortedlist19->refC++;
      DEBUG_COPY(sortedlist19->id);
   } else {
      sortedlist19 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist19->refC = 1;
      sortedlist19->id = 19;
      sortedlist19->n = 0;
      sortedlist19->root = NULL;
      DEBUG_NEW(sortedlist19->id);
   }
   unsigned int loop4 = 0;
   unsigned int loopLimit4 = (rand()%loopsFactor)/3 + 1;
   for(; loop4 < loopLimit4; loop4++) {
      if(sortedlist19 != NULL && sortedlist19->n > 0)
      {
          cell_t* cell7 = sortedlist19->root;
          if(cell7->val == 49)
          {
              cell7 = cell7->next;
              sortedlist19->n--;
          }else{
              while(cell7->next != NULL && cell7->next->val != 49) cell7 = cell7->next;
              if(cell7->next != NULL)
              {
                  cell7 = cell7->next->next;
                  sortedlist19->n--;
              }
           }
      }
   }
   return sortedlist19;
}


#include "sortedlist5_19.h" 
sortedlist_t* func24(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist21 = func31(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist21->id);
   free(params0.data);
   return sortedlist21;
}


#include "sortedlist5_19.h" 
sortedlist_t* func25(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist47 = func26(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist47->id);
      free(params0.data);
      sortedlist47->refC--;
      if(sortedlist47->refC == 0){
           cell_t* cell25 = sortedlist47->root;
           cell_t* tmp25  = NULL;
           while(cell25 != NULL) {
               tmp25 = cell25->next;
               free(cell25);
               cell25 = tmp25;
           }
           free(sortedlist47);
           DEBUG_FREE(sortedlist47->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist50 = func27(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist50->id);
      free(params0.data);
      sortedlist50->refC--;
      if(sortedlist50->refC == 0){
           cell_t* cell26 = sortedlist50->root;
           cell_t* tmp26  = NULL;
           while(cell26 != NULL) {
               tmp26 = cell26->next;
               free(cell26);
               cell26 = tmp26;
           }
           free(sortedlist50);
           DEBUG_FREE(sortedlist50->id);
      }
   }
   sortedlist_t* sortedlist52;
   if (pCounter > 0) {
      sortedlist52 = vars->data[--pCounter];
      sortedlist52->refC++;
      DEBUG_COPY(sortedlist52->id);
   } else {
      sortedlist52 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist52->refC = 1;
      sortedlist52->id = 52;
      sortedlist52->n = 0;
      sortedlist52->root = NULL;
      DEBUG_NEW(sortedlist52->id);
   }
   return sortedlist52;
}


#include "sortedlist5_19.h" 
sortedlist_t* func26(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop8 = 0;
   unsigned int loopLimit8 = (rand()%loopsFactor)/2 + 1;
   for(; loop8 < loopLimit8; loop8++) {
      sortedlist_t* sortedlist48;
      if (pCounter > 0) {
         sortedlist48 = vars->data[--pCounter];
         sortedlist48->refC++;
         DEBUG_COPY(sortedlist48->id);
      } else {
         sortedlist48 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist48->refC = 1;
         sortedlist48->id = 48;
         sortedlist48->n = 0;
         sortedlist48->root = NULL;
         DEBUG_NEW(sortedlist48->id);
      }
      sortedlist48->refC--;
      if(sortedlist48->refC == 0){
           cell_t* cell24 = sortedlist48->root;
           cell_t* tmp24  = NULL;
           while(cell24 != NULL) {
               tmp24 = cell24->next;
               free(cell24);
               cell24 = tmp24;
           }
           free(sortedlist48);
           DEBUG_FREE(sortedlist48->id);
      }
   }
   sortedlist_t* sortedlist49;
   if (pCounter > 0) {
      sortedlist49 = vars->data[--pCounter];
      sortedlist49->refC++;
      DEBUG_COPY(sortedlist49->id);
   } else {
      sortedlist49 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist49->refC = 1;
      sortedlist49->id = 49;
      sortedlist49->n = 0;
      sortedlist49->root = NULL;
      DEBUG_NEW(sortedlist49->id);
   }
   return sortedlist49;
}


#include "sortedlist5_19.h" 
sortedlist_t* func27(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist51 = func28(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist51->id);
   free(params0.data);
   return sortedlist51;
}


#include "sortedlist5_19.h" 
sortedlist_t* func28(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist10 = func29(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist10->id);
      free(params0.data);
      sortedlist10->refC--;
      if(sortedlist10->refC == 0){
           cell_t* cell2 = sortedlist10->root;
           cell_t* tmp2  = NULL;
           while(cell2 != NULL) {
               tmp2 = cell2->next;
               free(cell2);
               cell2 = tmp2;
           }
           free(sortedlist10);
           DEBUG_FREE(sortedlist10->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist12 = func30(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist12->id);
      free(params0.data);
      sortedlist12->refC--;
      if(sortedlist12->refC == 0){
           cell_t* cell3 = sortedlist12->root;
           cell_t* tmp3  = NULL;
           while(cell3 != NULL) {
               tmp3 = cell3->next;
               free(cell3);
               cell3 = tmp3;
           }
           free(sortedlist12);
           DEBUG_FREE(sortedlist12->id);
      }
   }
   sortedlist_t* sortedlist14;
   if (pCounter > 0) {
      sortedlist14 = vars->data[--pCounter];
      sortedlist14->refC++;
      DEBUG_COPY(sortedlist14->id);
   } else {
      sortedlist14 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist14->refC = 1;
      sortedlist14->id = 14;
      sortedlist14->n = 0;
      sortedlist14->root = NULL;
      DEBUG_NEW(sortedlist14->id);
   }
   return sortedlist14;
}


#include "sortedlist5_19.h" 
sortedlist_t* func29(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist11;
   if (pCounter > 0) {
      sortedlist11 = vars->data[--pCounter];
      sortedlist11->refC++;
      DEBUG_COPY(sortedlist11->id);
   } else {
      sortedlist11 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist11->refC = 1;
      sortedlist11->id = 11;
      sortedlist11->n = 0;
      sortedlist11->root = NULL;
      DEBUG_NEW(sortedlist11->id);
   }
   return sortedlist11;
}


#include "sortedlist5_19.h" 
sortedlist_t* func3(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist59 = func7(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist59->id);
   free(params0.data);
   return sortedlist59;
}


#include "sortedlist5_19.h" 
sortedlist_t* func30(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist13;
   if (pCounter > 0) {
      sortedlist13 = vars->data[--pCounter];
      sortedlist13->refC++;
      DEBUG_COPY(sortedlist13->id);
   } else {
      sortedlist13 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist13->refC = 1;
      sortedlist13->id = 13;
      sortedlist13->n = 0;
      sortedlist13->root = NULL;
      DEBUG_NEW(sortedlist13->id);
   }
   return sortedlist13;
}


#include "sortedlist5_19.h" 
sortedlist_t* func31(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist22 = func32(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist22->id);
      free(params0.data);
      sortedlist22->refC--;
      if(sortedlist22->refC == 0){
           cell_t* cell9 = sortedlist22->root;
           cell_t* tmp9  = NULL;
           while(cell9 != NULL) {
               tmp9 = cell9->next;
               free(cell9);
               cell9 = tmp9;
           }
           free(sortedlist22);
           DEBUG_FREE(sortedlist22->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist24 = func33(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist24->id);
      free(params0.data);
      sortedlist24->refC--;
      if(sortedlist24->refC == 0){
           cell_t* cell10 = sortedlist24->root;
           cell_t* tmp10  = NULL;
           while(cell10 != NULL) {
               tmp10 = cell10->next;
               free(cell10);
               cell10 = tmp10;
           }
           free(sortedlist24);
           DEBUG_FREE(sortedlist24->id);
      }
   }
   sortedlist_t* sortedlist26;
   if (pCounter > 0) {
      sortedlist26 = vars->data[--pCounter];
      sortedlist26->refC++;
      DEBUG_COPY(sortedlist26->id);
   } else {
      sortedlist26 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist26->refC = 1;
      sortedlist26->id = 26;
      sortedlist26->n = 0;
      sortedlist26->root = NULL;
      DEBUG_NEW(sortedlist26->id);
   }
   return sortedlist26;
}


#include "sortedlist5_19.h" 
sortedlist_t* func32(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist23;
   if (pCounter > 0) {
      sortedlist23 = vars->data[--pCounter];
      sortedlist23->refC++;
      DEBUG_COPY(sortedlist23->id);
   } else {
      sortedlist23 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist23->refC = 1;
      sortedlist23->id = 23;
      sortedlist23->n = 0;
      sortedlist23->root = NULL;
      DEBUG_NEW(sortedlist23->id);
   }
   return sortedlist23;
}


#include "sortedlist5_19.h" 
sortedlist_t* func33(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist25;
   if (pCounter > 0) {
      sortedlist25 = vars->data[--pCounter];
      sortedlist25->refC++;
      DEBUG_COPY(sortedlist25->id);
   } else {
      sortedlist25 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist25->refC = 1;
      sortedlist25->id = 25;
      sortedlist25->n = 0;
      sortedlist25->root = NULL;
      DEBUG_NEW(sortedlist25->id);
   }
   return sortedlist25;
}


#include "sortedlist5_19.h" 
sortedlist_t* func4(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist33 = func5(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist33->id);
      free(params0.data);
      sortedlist33->refC--;
      if(sortedlist33->refC == 0){
           cell_t* cell18 = sortedlist33->root;
           cell_t* tmp18  = NULL;
           while(cell18 != NULL) {
               tmp18 = cell18->next;
               free(cell18);
               cell18 = tmp18;
           }
           free(sortedlist33);
           DEBUG_FREE(sortedlist33->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist35 = func6(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist35->id);
      free(params0.data);
      sortedlist35->refC--;
      if(sortedlist35->refC == 0){
           cell_t* cell29 = sortedlist35->root;
           cell_t* tmp29  = NULL;
           while(cell29 != NULL) {
               tmp29 = cell29->next;
               free(cell29);
               cell29 = tmp29;
           }
           free(sortedlist35);
           DEBUG_FREE(sortedlist35->id);
      }
   }
   sortedlist_t* sortedlist55;
   if (pCounter > 0) {
      sortedlist55 = vars->data[--pCounter];
      sortedlist55->refC++;
      DEBUG_COPY(sortedlist55->id);
   } else {
      sortedlist55 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist55->refC = 1;
      sortedlist55->id = 55;
      sortedlist55->n = 0;
      sortedlist55->root = NULL;
      DEBUG_NEW(sortedlist55->id);
   }
   return sortedlist55;
}


#include "sortedlist5_19.h" 
sortedlist_t* func5(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist34;
   if (pCounter > 0) {
      sortedlist34 = vars->data[--pCounter];
      sortedlist34->refC++;
      DEBUG_COPY(sortedlist34->id);
   } else {
      sortedlist34 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist34->refC = 1;
      sortedlist34->id = 34;
      sortedlist34->n = 0;
      sortedlist34->root = NULL;
      DEBUG_NEW(sortedlist34->id);
   }
   unsigned int loop5 = 0;
   unsigned int loopLimit5 = (rand()%loopsFactor)/2 + 1;
   for(; loop5 < loopLimit5; loop5++) {
      if(sortedlist34 != NULL && sortedlist34->n > 0)
      {
          cell_t* cell17 = sortedlist34->root;
          if(cell17->val == 68)
          {
              cell17 = cell17->next;
              sortedlist34->n--;
          }else{
              while(cell17->next != NULL && cell17->next->val != 68) cell17 = cell17->next;
              if(cell17->next != NULL)
              {
                  cell17 = cell17->next->next;
                  sortedlist34->n--;
              }
           }
      }
   }
   return sortedlist34;
}


#include "sortedlist5_19.h" 
sortedlist_t* func6(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist36 = func13(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist36->id);
   free(params0.data);
   return sortedlist36;
}


#include "sortedlist5_19.h" 
sortedlist_t* func7(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist60 = func8(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist60->id);
      free(params0.data);
      sortedlist60->refC--;
      if(sortedlist60->refC == 0){
           cell_t* cell35 = sortedlist60->root;
           cell_t* tmp35  = NULL;
           while(cell35 != NULL) {
               tmp35 = cell35->next;
               free(cell35);
               cell35 = tmp35;
           }
           free(sortedlist60);
           DEBUG_FREE(sortedlist60->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist64 = func9(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist64->id);
      free(params0.data);
      sortedlist64->refC--;
      if(sortedlist64->refC == 0){
           cell_t* cell36 = sortedlist64->root;
           cell_t* tmp36  = NULL;
           while(cell36 != NULL) {
               tmp36 = cell36->next;
               free(cell36);
               cell36 = tmp36;
           }
           free(sortedlist64);
           DEBUG_FREE(sortedlist64->id);
      }
   }
   sortedlist_t* sortedlist66;
   if (pCounter > 0) {
      sortedlist66 = vars->data[--pCounter];
      sortedlist66->refC++;
      DEBUG_COPY(sortedlist66->id);
   } else {
      sortedlist66 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist66->refC = 1;
      sortedlist66->id = 66;
      sortedlist66->n = 0;
      sortedlist66->root = NULL;
      DEBUG_NEW(sortedlist66->id);
   }
   return sortedlist66;
}


#include "sortedlist5_19.h" 
sortedlist_t* func8(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop10 = 0;
   unsigned int loopLimit10 = (rand()%loopsFactor)/2 + 1;
   for(; loop10 < loopLimit10; loop10++) {
      sortedlist_t* sortedlist61;
      if (pCounter > 0) {
         sortedlist61 = vars->data[--pCounter];
         sortedlist61->refC++;
         DEBUG_COPY(sortedlist61->id);
      } else {
         sortedlist61 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist61->refC = 1;
         sortedlist61->id = 61;
         sortedlist61->n = 0;
         sortedlist61->root = NULL;
         DEBUG_NEW(sortedlist61->id);
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist61;
      sortedlist_t* sortedlist62 = func19(&params0, rng(), loopsFactor);
      DEBUG_RETURN(sortedlist62->id);
      free(params0.data);
      sortedlist62->refC--;
      if(sortedlist62->refC == 0){
           cell_t* cell33 = sortedlist62->root;
           cell_t* tmp33  = NULL;
           while(cell33 != NULL) {
               tmp33 = cell33->next;
               free(cell33);
               cell33 = tmp33;
           }
           free(sortedlist62);
           DEBUG_FREE(sortedlist62->id);
      }
      sortedlist61->refC--;
      if(sortedlist61->refC == 0){
           cell_t* cell34 = sortedlist61->root;
           cell_t* tmp34  = NULL;
           while(cell34 != NULL) {
               tmp34 = cell34->next;
               free(cell34);
               cell34 = tmp34;
           }
           free(sortedlist61);
           DEBUG_FREE(sortedlist61->id);
      }
   }
   sortedlist_t* sortedlist63;
   if (pCounter > 0) {
      sortedlist63 = vars->data[--pCounter];
      sortedlist63->refC++;
      DEBUG_COPY(sortedlist63->id);
   } else {
      sortedlist63 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist63->refC = 1;
      sortedlist63->id = 63;
      sortedlist63->n = 0;
      sortedlist63->root = NULL;
      DEBUG_NEW(sortedlist63->id);
   }
   return sortedlist63;
}


#include "sortedlist5_19.h" 
sortedlist_t* func9(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist65 = func10(&params0, rng(), loopsFactor);
   DEBUG_RETURN(sortedlist65->id);
   free(params0.data);
   return sortedlist65;
}


#include "sortedlist5_19.h" 
unsigned long rng() {
   unsigned long n = rand();
   return (n << 32) | rand();
}


#include "sortedlist5_19.h"

int main(int argc, char** argv) {
   int loopsFactor = 100;
   srand(0);
   for (int i = 1; i < argc; i++) {
      if (strcmp(argv[i], "-path-seed") == 0) {
         i++;
         if (i < argc) {
            srand(atoi(argv[i]));
         }
      }
      else if (strcmp(argv[i], "-loops-factor") == 0) {
         i++;
         if (i < argc) {
            loopsFactor = atoi(argv[i]);
         }
      }
   }
   unsigned int loop0 = 0;
   unsigned int loopLimit0 = (rand()%loopsFactor)/1 + 1;
   for(; loop0 < loopLimit0; loop0++) {
      if(rng() & 1) {
         sortedlist_t_param params0;
         params0.size = 0;
         params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
         sortedlist_t* sortedlist0 = func0(&params0, loopsFactor);
         DEBUG_RETURN(sortedlist0->id);
         free(params0.data);
         sortedlist0->refC--;
         if(sortedlist0->refC == 0){
              cell_t* cell16 = sortedlist0->root;
              cell_t* tmp16  = NULL;
              while(cell16 != NULL) {
                  tmp16 = cell16->next;
                  free(cell16);
                  cell16 = tmp16;
              }
              free(sortedlist0);
              DEBUG_FREE(sortedlist0->id);
         }
      }
      else {
         sortedlist_t_param params0;
         params0.size = 0;
         params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
         sortedlist_t* sortedlist31 = func1(&params0, loopsFactor);
         DEBUG_RETURN(sortedlist31->id);
         free(params0.data);
         sortedlist31->refC--;
         if(sortedlist31->refC == 0){
              cell_t* cell30 = sortedlist31->root;
              cell_t* tmp30  = NULL;
              while(cell30 != NULL) {
                  tmp30 = cell30->next;
                  free(cell30);
                  cell30 = tmp30;
              }
              free(sortedlist31);
              DEBUG_FREE(sortedlist31->id);
         }
      }
      if(rng() & 1) {
         sortedlist_t_param params0;
         params0.size = 0;
         params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
         sortedlist_t* sortedlist56 = func2(&params0, loopsFactor);
         DEBUG_RETURN(sortedlist56->id);
         free(params0.data);
         sortedlist56->refC--;
         if(sortedlist56->refC == 0){
              cell_t* cell32 = sortedlist56->root;
              cell_t* tmp32  = NULL;
              while(cell32 != NULL) {
                  tmp32 = cell32->next;
                  free(cell32);
                  cell32 = tmp32;
              }
              free(sortedlist56);
              DEBUG_FREE(sortedlist56->id);
         }
      }
      else {
         sortedlist_t_param params0;
         params0.size = 0;
         params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
         sortedlist_t* sortedlist58 = func3(&params0, loopsFactor);
         DEBUG_RETURN(sortedlist58->id);
         free(params0.data);
         sortedlist58->refC--;
         if(sortedlist58->refC == 0){
              cell_t* cell37 = sortedlist58->root;
              cell_t* tmp37  = NULL;
              while(cell37 != NULL) {
                  tmp37 = cell37->next;
                  free(cell37);
                  cell37 = tmp37;
              }
              free(sortedlist58);
              DEBUG_FREE(sortedlist58->id);
         }
      }
   }
   return 0;
}


#ifndef sortedlist5_19
#define sortedlist5_19
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef DEBUG
    #define DEBUG_NEW(id) printf("[NEW]\t\tId %d created\n", id)
    #define DEBUG_COPY(id) printf("[COPY]\t\tId %d copied\n", id)
    #define DEBUG_RETURN(id) printf("[RETURN]\tId %d returned\n", id)
    #define DEBUG_FREE(id) printf("[FREE]\t\tId %d freed\n", id)
#else
    #define DEBUG_NEW(id)
    #define DEBUG_COPY(id)
    #define DEBUG_RETURN(id)
    #define DEBUG_FREE(id)
#endif
#include <stdbool.h>
#include "Dalloc.h"
typedef struct cell_t {
     struct cell_t* next;
     unsigned int val;
} cell_t;
typedef struct sortedlist_t {
     cell_t* root;
     size_t refC;
     int id;
     unsigned int n;
} sortedlist_t;
typedef struct {
   sortedlist_t** data;
   size_t size;
} sortedlist_t_param;

unsigned long rng();
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func10(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func11(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func12(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func16(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func17(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func28(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func29(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func30(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func18(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func22(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func23(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func24(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func31(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func32(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func33(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func4(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func5(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func6(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func13(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func14(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func15(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func19(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func20(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func21(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func25(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func26(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func27(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func3(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func7(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func8(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func9(sortedlist_t_param* vars, int loopsFactor);
#endif
