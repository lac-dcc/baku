```func0.c
#include "sortedlist7_5.h" 
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   unsigned int loop0 = 0;
   unsigned int loopLimit0 = (rand()%loopsFactor)/1 + 1;
   for(; loop0 < loopLimit0; loop0++) {
      sortedlist_t* sortedlist1;
      if (pCounter > 0) {
         sortedlist1 = vars->data[--pCounter];
         sortedlist1->refC++;
         DEBUG_COPY(sortedlist1->id);
      } else {
         sortedlist1 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist1->refC = 1;
         sortedlist1->id = 1;
         sortedlist1->n = 0;
         sortedlist1->root = NULL;
         DEBUG_NEW(sortedlist1->id);
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist1;
      sortedlist_t* sortedlist2 = func6(&params0, get_path(), loopsFactor);
      DEBUG_RETURN(sortedlist2->id);
      free(params0.data);
      sortedlist2->refC--;
      if(sortedlist2->refC == 0){
           cell_t* cell17 = sortedlist2->root;
           cell_t* tmp17  = NULL;
           while(cell17 != NULL) {
               tmp17 = cell17->next;
               free(cell17);
               cell17 = tmp17;
           }
           free(sortedlist2);
           DEBUG_FREE(sortedlist2->id);
      }
      sortedlist1->refC--;
      if(sortedlist1->refC == 0){
           cell_t* cell18 = sortedlist1->root;
           cell_t* tmp18  = NULL;
           while(cell18 != NULL) {
               tmp18 = cell18->next;
               free(cell18);
               cell18 = tmp18;
           }
           free(sortedlist1);
           DEBUG_FREE(sortedlist1->id);
      }
   }
   sortedlist_t* sortedlist33;
   if (pCounter > 0) {
      sortedlist33 = vars->data[--pCounter];
      sortedlist33->refC++;
      DEBUG_COPY(sortedlist33->id);
   } else {
      sortedlist33 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist33->refC = 1;
      sortedlist33->id = 33;
      sortedlist33->n = 0;
      sortedlist33->root = NULL;
      DEBUG_NEW(sortedlist33->id);
   }
   return sortedlist33;
}


```
```func1.c
#include "sortedlist7_5.h" 
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist35 = func3(&params0, get_path(), loopsFactor);
   DEBUG_RETURN(sortedlist35->id);
   free(params0.data);
   return sortedlist35;
}


```
```func10.c
#include "sortedlist7_5.h" 
sortedlist_t* func10(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist9;
   if (pCounter > 0) {
      sortedlist9 = vars->data[--pCounter];
      sortedlist9->refC++;
      DEBUG_COPY(sortedlist9->id);
   } else {
      sortedlist9 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist9->refC = 1;
      sortedlist9->id = 9;
      sortedlist9->n = 0;
      sortedlist9->root = NULL;
      DEBUG_NEW(sortedlist9->id);
   }
   unsigned int loop2 = 0;
   unsigned int loopLimit2 = (rand()%loopsFactor)/2 + 1;
   for(; loop2 < loopLimit2; loop2++) {
      if(sortedlist9 != NULL && sortedlist9->n > 0)
      {
          cell_t* cell3 = sortedlist9->root;
          if(cell3->val == 35)
          {
              cell3 = cell3->next;
              sortedlist9->n--;
          }else{
              while(cell3->next != NULL && cell3->next->val != 35) cell3 = cell3->next;
              if(cell3->next != NULL)
              {
                  cell3 = cell3->next->next;
                  sortedlist9->n--;
              }
           }
      }
   }
   return sortedlist9;
}


```
```func11.c
#include "sortedlist7_5.h" 
sortedlist_t* func11(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist11;
   if (pCounter > 0) {
      sortedlist11 = vars->data[--pCounter];
      sortedlist11->refC++;
      DEBUG_COPY(sortedlist11->id);
   } else {
      sortedlist11 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist11->refC = 1;
      sortedlist11->id = 11;
      sortedlist11->n = 0;
      sortedlist11->root = NULL;
      DEBUG_NEW(sortedlist11->id);
   }
   return sortedlist11;
}


```
```func12.c
#include "sortedlist7_5.h" 
sortedlist_t* func12(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist13 = func13(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist13->id);
      free(params0.data);
      sortedlist13->refC--;
      if(sortedlist13->refC == 0){
           cell_t* cell7 = sortedlist13->root;
           cell_t* tmp7  = NULL;
           while(cell7 != NULL) {
               tmp7 = cell7->next;
               free(cell7);
               cell7 = tmp7;
           }
           free(sortedlist13);
           DEBUG_FREE(sortedlist13->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist15 = func14(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist15->id);
      free(params0.data);
      sortedlist15->refC--;
      if(sortedlist15->refC == 0){
           cell_t* cell8 = sortedlist15->root;
           cell_t* tmp8  = NULL;
           while(cell8 != NULL) {
               tmp8 = cell8->next;
               free(cell8);
               cell8 = tmp8;
           }
           free(sortedlist15);
           DEBUG_FREE(sortedlist15->id);
      }
   }
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist17 = func15(&params0, get_path(), loopsFactor);
   DEBUG_RETURN(sortedlist17->id);
   free(params0.data);
   return sortedlist17;
}


```
```func13.c
#include "sortedlist7_5.h" 
sortedlist_t* func13(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist14;
   if (pCounter > 0) {
      sortedlist14 = vars->data[--pCounter];
      sortedlist14->refC++;
      DEBUG_COPY(sortedlist14->id);
   } else {
      sortedlist14 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist14->refC = 1;
      sortedlist14->id = 14;
      sortedlist14->n = 0;
      sortedlist14->root = NULL;
      DEBUG_NEW(sortedlist14->id);
   }
   unsigned int loop3 = 0;
   unsigned int loopLimit3 = (rand()%loopsFactor)/2 + 1;
   for(; loop3 < loopLimit3; loop3++) {
      if(sortedlist14 != NULL && sortedlist14->n > 0)
      {
          cell_t* cell6 = sortedlist14->root;
          if(cell6->val == 21)
          {
              cell6 = cell6->next;
              sortedlist14->n--;
          }else{
              while(cell6->next != NULL && cell6->next->val != 21) cell6 = cell6->next;
              if(cell6->next != NULL)
              {
                  cell6 = cell6->next->next;
                  sortedlist14->n--;
              }
           }
      }
   }
   return sortedlist14;
}


```
```func14.c
#include "sortedlist7_5.h" 
sortedlist_t* func14(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist16;
   if (pCounter > 0) {
      sortedlist16 = vars->data[--pCounter];
      sortedlist16->refC++;
      DEBUG_COPY(sortedlist16->id);
   } else {
      sortedlist16 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist16->refC = 1;
      sortedlist16->id = 16;
      sortedlist16->n = 0;
      sortedlist16->root = NULL;
      DEBUG_NEW(sortedlist16->id);
   }
   return sortedlist16;
}


```
```func15.c
#include "sortedlist7_5.h" 
sortedlist_t* func15(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist18 = func16(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist18->id);
      free(params0.data);
      sortedlist18->refC--;
      if(sortedlist18->refC == 0){
           cell_t* cell10 = sortedlist18->root;
           cell_t* tmp10  = NULL;
           while(cell10 != NULL) {
               tmp10 = cell10->next;
               free(cell10);
               cell10 = tmp10;
           }
           free(sortedlist18);
           DEBUG_FREE(sortedlist18->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist20 = func17(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist20->id);
      free(params0.data);
      sortedlist20->refC--;
      if(sortedlist20->refC == 0){
           cell_t* cell11 = sortedlist20->root;
           cell_t* tmp11  = NULL;
           while(cell11 != NULL) {
               tmp11 = cell11->next;
               free(cell11);
               cell11 = tmp11;
           }
           free(sortedlist20);
           DEBUG_FREE(sortedlist20->id);
      }
   }
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist22 = func18(&params0, get_path(), loopsFactor);
   DEBUG_RETURN(sortedlist22->id);
   free(params0.data);
   return sortedlist22;
}


```
```func16.c
#include "sortedlist7_5.h" 
sortedlist_t* func16(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist19;
   if (pCounter > 0) {
      sortedlist19 = vars->data[--pCounter];
      sortedlist19->refC++;
      DEBUG_COPY(sortedlist19->id);
   } else {
      sortedlist19 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist19->refC = 1;
      sortedlist19->id = 19;
      sortedlist19->n = 0;
      sortedlist19->root = NULL;
      DEBUG_NEW(sortedlist19->id);
   }
   unsigned int loop4 = 0;
   unsigned int loopLimit4 = (rand()%loopsFactor)/2 + 1;
   for(; loop4 < loopLimit4; loop4++) {
      if(sortedlist19 != NULL && sortedlist19->n > 0)
      {
          cell_t* cell9 = sortedlist19->root;
          if(cell9->val == 59)
          {
              cell9 = cell9->next;
              sortedlist19->n--;
          }else{
              while(cell9->next != NULL && cell9->next->val != 59) cell9 = cell9->next;
              if(cell9->next != NULL)
              {
                  cell9 = cell9->next->next;
                  sortedlist19->n--;
              }
           }
      }
   }
   return sortedlist19;
}


```
```func17.c
#include "sortedlist7_5.h" 
sortedlist_t* func17(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist21;
   if (pCounter > 0) {
      sortedlist21 = vars->data[--pCounter];
      sortedlist21->refC++;
      DEBUG_COPY(sortedlist21->id);
   } else {
      sortedlist21 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist21->refC = 1;
      sortedlist21->id = 21;
      sortedlist21->n = 0;
      sortedlist21->root = NULL;
      DEBUG_NEW(sortedlist21->id);
   }
   return sortedlist21;
}


```
```func18.c
#include "sortedlist7_5.h" 
sortedlist_t* func18(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist23 = func19(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist23->id);
      free(params0.data);
      sortedlist23->refC--;
      if(sortedlist23->refC == 0){
           cell_t* cell13 = sortedlist23->root;
           cell_t* tmp13  = NULL;
           while(cell13 != NULL) {
               tmp13 = cell13->next;
               free(cell13);
               cell13 = tmp13;
           }
           free(sortedlist23);
           DEBUG_FREE(sortedlist23->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist25 = func20(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist25->id);
      free(params0.data);
      sortedlist25->refC--;
      if(sortedlist25->refC == 0){
           cell_t* cell14 = sortedlist25->root;
           cell_t* tmp14  = NULL;
           while(cell14 != NULL) {
               tmp14 = cell14->next;
               free(cell14);
               cell14 = tmp14;
           }
           free(sortedlist25);
           DEBUG_FREE(sortedlist25->id);
      }
   }
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist27 = func21(&params0, get_path(), loopsFactor);
   DEBUG_RETURN(sortedlist27->id);
   free(params0.data);
   return sortedlist27;
}


```
```func19.c
#include "sortedlist7_5.h" 
sortedlist_t* func19(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist24;
   if (pCounter > 0) {
      sortedlist24 = vars->data[--pCounter];
      sortedlist24->refC++;
      DEBUG_COPY(sortedlist24->id);
   } else {
      sortedlist24 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist24->refC = 1;
      sortedlist24->id = 24;
      sortedlist24->n = 0;
      sortedlist24->root = NULL;
      DEBUG_NEW(sortedlist24->id);
   }
   unsigned int loop5 = 0;
   unsigned int loopLimit5 = (rand()%loopsFactor)/2 + 1;
   for(; loop5 < loopLimit5; loop5++) {
      if(sortedlist24 != NULL && sortedlist24->n > 0)
      {
          cell_t* cell12 = sortedlist24->root;
          if(cell12->val == 26)
          {
              cell12 = cell12->next;
              sortedlist24->n--;
          }else{
              while(cell12->next != NULL && cell12->next->val != 26) cell12 = cell12->next;
              if(cell12->next != NULL)
              {
                  cell12 = cell12->next->next;
                  sortedlist24->n--;
              }
           }
      }
   }
   return sortedlist24;
}


```
```func2.c
#include "sortedlist7_5.h" 
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist42;
   if (pCounter > 0) {
      sortedlist42 = vars->data[--pCounter];
      sortedlist42->refC++;
      DEBUG_COPY(sortedlist42->id);
   } else {
      sortedlist42 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist42->refC = 1;
      sortedlist42->id = 42;
      sortedlist42->n = 0;
      sortedlist42->root = NULL;
      DEBUG_NEW(sortedlist42->id);
   }
   unsigned int loop7 = 0;
   unsigned int loopLimit7 = (rand()%loopsFactor)/1 + 1;
   for(; loop7 < loopLimit7; loop7++) {
      if(sortedlist42 != NULL && sortedlist42->n > 0)
      {
          cell_t* cell22 = sortedlist42->root;
          if(cell22->val == 93)
          {
              cell22 = cell22->next;
              sortedlist42->n--;
          }else{
              while(cell22->next != NULL && cell22->next->val != 93) cell22 = cell22->next;
              if(cell22->next != NULL)
              {
                  cell22 = cell22->next->next;
                  sortedlist42->n--;
              }
           }
      }
   }
   return sortedlist42;
}


```
```func20.c
#include "sortedlist7_5.h" 
sortedlist_t* func20(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist26;
   if (pCounter > 0) {
      sortedlist26 = vars->data[--pCounter];
      sortedlist26->refC++;
      DEBUG_COPY(sortedlist26->id);
   } else {
      sortedlist26 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist26->refC = 1;
      sortedlist26->id = 26;
      sortedlist26->n = 0;
      sortedlist26->root = NULL;
      DEBUG_NEW(sortedlist26->id);
   }
   return sortedlist26;
}


```
```func21.c
#include "sortedlist7_5.h" 
sortedlist_t* func21(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist28 = func22(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist28->id);
      free(params0.data);
      sortedlist28->refC--;
      if(sortedlist28->refC == 0){
           cell_t* cell15 = sortedlist28->root;
           cell_t* tmp15  = NULL;
           while(cell15 != NULL) {
               tmp15 = cell15->next;
               free(cell15);
               cell15 = tmp15;
           }
           free(sortedlist28);
           DEBUG_FREE(sortedlist28->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist30 = func23(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist30->id);
      free(params0.data);
      sortedlist30->refC--;
      if(sortedlist30->refC == 0){
           cell_t* cell16 = sortedlist30->root;
           cell_t* tmp16  = NULL;
           while(cell16 != NULL) {
               tmp16 = cell16->next;
               free(cell16);
               cell16 = tmp16;
           }
           free(sortedlist30);
           DEBUG_FREE(sortedlist30->id);
      }
   }
   sortedlist_t* sortedlist32;
   if (pCounter > 0) {
      sortedlist32 = vars->data[--pCounter];
      sortedlist32->refC++;
      DEBUG_COPY(sortedlist32->id);
   } else {
      sortedlist32 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist32->refC = 1;
      sortedlist32->id = 32;
      sortedlist32->n = 0;
      sortedlist32->root = NULL;
      DEBUG_NEW(sortedlist32->id);
   }
   return sortedlist32;
}


```
```func22.c
#include "sortedlist7_5.h" 
sortedlist_t* func22(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist29;
   if (pCounter > 0) {
      sortedlist29 = vars->data[--pCounter];
      sortedlist29->refC++;
      DEBUG_COPY(sortedlist29->id);
   } else {
      sortedlist29 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist29->refC = 1;
      sortedlist29->id = 29;
      sortedlist29->n = 0;
      sortedlist29->root = NULL;
      DEBUG_NEW(sortedlist29->id);
   }
   return sortedlist29;
}


```
```func23.c
#include "sortedlist7_5.h" 
sortedlist_t* func23(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist31;
   if (pCounter > 0) {
      sortedlist31 = vars->data[--pCounter];
      sortedlist31->refC++;
      DEBUG_COPY(sortedlist31->id);
   } else {
      sortedlist31 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist31->refC = 1;
      sortedlist31->id = 31;
      sortedlist31->n = 0;
      sortedlist31->root = NULL;
      DEBUG_NEW(sortedlist31->id);
   }
   return sortedlist31;
}


```
```func3.c
#include "sortedlist7_5.h" 
sortedlist_t* func3(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist36 = func4(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist36->id);
      free(params0.data);
      sortedlist36->refC--;
      if(sortedlist36->refC == 0){
           cell_t* cell20 = sortedlist36->root;
           cell_t* tmp20  = NULL;
           while(cell20 != NULL) {
               tmp20 = cell20->next;
               free(cell20);
               cell20 = tmp20;
           }
           free(sortedlist36);
           DEBUG_FREE(sortedlist36->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist38 = func5(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist38->id);
      free(params0.data);
      sortedlist38->refC--;
      if(sortedlist38->refC == 0){
           cell_t* cell21 = sortedlist38->root;
           cell_t* tmp21  = NULL;
           while(cell21 != NULL) {
               tmp21 = cell21->next;
               free(cell21);
               cell21 = tmp21;
           }
           free(sortedlist38);
           DEBUG_FREE(sortedlist38->id);
      }
   }
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist40 = func6(&params0, get_path(), loopsFactor);
   DEBUG_RETURN(sortedlist40->id);
   free(params0.data);
   return sortedlist40;
}


```
```func4.c
#include "sortedlist7_5.h" 
sortedlist_t* func4(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist37;
   if (pCounter > 0) {
      sortedlist37 = vars->data[--pCounter];
      sortedlist37->refC++;
      DEBUG_COPY(sortedlist37->id);
   } else {
      sortedlist37 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist37->refC = 1;
      sortedlist37->id = 37;
      sortedlist37->n = 0;
      sortedlist37->root = NULL;
      DEBUG_NEW(sortedlist37->id);
   }
   unsigned int loop6 = 0;
   unsigned int loopLimit6 = (rand()%loopsFactor)/1 + 1;
   for(; loop6 < loopLimit6; loop6++) {
      if(sortedlist37 != NULL && sortedlist37->n > 0)
      {
          cell_t* cell19 = sortedlist37->root;
          if(cell19->val == 29)
          {
              cell19 = cell19->next;
              sortedlist37->n--;
          }else{
              while(cell19->next != NULL && cell19->next->val != 29) cell19 = cell19->next;
              if(cell19->next != NULL)
              {
                  cell19 = cell19->next->next;
                  sortedlist37->n--;
              }
           }
      }
   }
   return sortedlist37;
}


```
```func5.c
#include "sortedlist7_5.h" 
sortedlist_t* func5(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist39;
   if (pCounter > 0) {
      sortedlist39 = vars->data[--pCounter];
      sortedlist39->refC++;
      DEBUG_COPY(sortedlist39->id);
   } else {
      sortedlist39 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist39->refC = 1;
      sortedlist39->id = 39;
      sortedlist39->n = 0;
      sortedlist39->root = NULL;
      DEBUG_NEW(sortedlist39->id);
   }
   return sortedlist39;
}


```
```func6.c
#include "sortedlist7_5.h" 
sortedlist_t* func6(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist3 = func7(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist3->id);
      free(params0.data);
      sortedlist3->refC--;
      if(sortedlist3->refC == 0){
           cell_t* cell1 = sortedlist3->root;
           cell_t* tmp1  = NULL;
           while(cell1 != NULL) {
               tmp1 = cell1->next;
               free(cell1);
               cell1 = tmp1;
           }
           free(sortedlist3);
           DEBUG_FREE(sortedlist3->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist5 = func8(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist5->id);
      free(params0.data);
      sortedlist5->refC--;
      if(sortedlist5->refC == 0){
           cell_t* cell2 = sortedlist5->root;
           cell_t* tmp2  = NULL;
           while(cell2 != NULL) {
               tmp2 = cell2->next;
               free(cell2);
               cell2 = tmp2;
           }
           free(sortedlist5);
           DEBUG_FREE(sortedlist5->id);
      }
   }
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist7 = func9(&params0, get_path(), loopsFactor);
   DEBUG_RETURN(sortedlist7->id);
   free(params0.data);
   return sortedlist7;
}


```
```func7.c
#include "sortedlist7_5.h" 
sortedlist_t* func7(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist4;
   if (pCounter > 0) {
      sortedlist4 = vars->data[--pCounter];
      sortedlist4->refC++;
      DEBUG_COPY(sortedlist4->id);
   } else {
      sortedlist4 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist4->refC = 1;
      sortedlist4->id = 4;
      sortedlist4->n = 0;
      sortedlist4->root = NULL;
      DEBUG_NEW(sortedlist4->id);
   }
   unsigned int loop1 = 0;
   unsigned int loopLimit1 = (rand()%loopsFactor)/2 + 1;
   for(; loop1 < loopLimit1; loop1++) {
      if(sortedlist4 != NULL && sortedlist4->n > 0)
      {
          cell_t* cell0 = sortedlist4->root;
          if(cell0->val == 86)
          {
              cell0 = cell0->next;
              sortedlist4->n--;
          }else{
              while(cell0->next != NULL && cell0->next->val != 86) cell0 = cell0->next;
              if(cell0->next != NULL)
              {
                  cell0 = cell0->next->next;
                  sortedlist4->n--;
              }
           }
      }
   }
   return sortedlist4;
}


```
```func8.c
#include "sortedlist7_5.h" 
sortedlist_t* func8(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist6;
   if (pCounter > 0) {
      sortedlist6 = vars->data[--pCounter];
      sortedlist6->refC++;
      DEBUG_COPY(sortedlist6->id);
   } else {
      sortedlist6 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist6->refC = 1;
      sortedlist6->id = 6;
      sortedlist6->n = 0;
      sortedlist6->root = NULL;
      DEBUG_NEW(sortedlist6->id);
   }
   return sortedlist6;
}


```
```func9.c
#include "sortedlist7_5.h" 
sortedlist_t* func9(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor) {
   size_t pCounter = vars->size;
   if(PATH0 & 1) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist8 = func10(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist8->id);
      free(params0.data);
      sortedlist8->refC--;
      if(sortedlist8->refC == 0){
           cell_t* cell4 = sortedlist8->root;
           cell_t* tmp4  = NULL;
           while(cell4 != NULL) {
               tmp4 = cell4->next;
               free(cell4);
               cell4 = tmp4;
           }
           free(sortedlist8);
           DEBUG_FREE(sortedlist8->id);
      }
   }
   else {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist10 = func11(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist10->id);
      free(params0.data);
      sortedlist10->refC--;
      if(sortedlist10->refC == 0){
           cell_t* cell5 = sortedlist10->root;
           cell_t* tmp5  = NULL;
           while(cell5 != NULL) {
               tmp5 = cell5->next;
               free(cell5);
               cell5 = tmp5;
           }
           free(sortedlist10);
           DEBUG_FREE(sortedlist10->id);
      }
   }
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist12 = func12(&params0, get_path(), loopsFactor);
   DEBUG_RETURN(sortedlist12->id);
   free(params0.data);
   return sortedlist12;
}


```
```path.c
#include "sortedlist7_5.h" 
unsigned long get_path() {
   const char* path = getenv("BENCH_PATH");
   if(path != NULL) { 
      return atoi(path);
   }else {
      unsigned long n = rand();
      return (n << 32) | rand();
   }
}


```
```sortedlist7_5.c
#include "sortedlist7_5.h"

int main(int argc, char** argv) {
   int loopsFactor = 100;
   srand(0);
   for (int i = 1; i < argc; i++) {
      if (strcmp(argv[i], "-path-seed") == 0) {
         i++;
         if (i < argc) {
            srand(atoi(argv[i]));
         }
      }
      else if (strcmp(argv[i], "-loops-factor") == 0) {
         i++;
         if (i < argc) {
            loopsFactor = atoi(argv[i]);
         }
      }
   }
   sortedlist_t_param params0;
   params0.size = 0;
   params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
   sortedlist_t* sortedlist0 = func0(&params0, loopsFactor);
   DEBUG_RETURN(sortedlist0->id);
   free(params0.data);
   sortedlist_t_param params1;
   params1.size = 1;
   params1.data = (sortedlist_t**)malloc(params1.size*sizeof(sortedlist_t*));
   params1.data[0] = sortedlist0;
   sortedlist_t* sortedlist34 = func1(&params1, loopsFactor);
   DEBUG_RETURN(sortedlist34->id);
   free(params1.data);
   sortedlist_t_param params2;
   params2.size = 2;
   params2.data = (sortedlist_t**)malloc(params2.size*sizeof(sortedlist_t*));
   params2.data[0] = sortedlist0;
   params2.data[1] = sortedlist34;
   sortedlist_t* sortedlist41 = func2(&params2, loopsFactor);
   DEBUG_RETURN(sortedlist41->id);
   free(params2.data);
   sortedlist41->refC--;
   if(sortedlist41->refC == 0){
        cell_t* cell23 = sortedlist41->root;
        cell_t* tmp23  = NULL;
        while(cell23 != NULL) {
            tmp23 = cell23->next;
            free(cell23);
            cell23 = tmp23;
        }
        free(sortedlist41);
        DEBUG_FREE(sortedlist41->id);
   }
   sortedlist34->refC--;
   if(sortedlist34->refC == 0){
        cell_t* cell24 = sortedlist34->root;
        cell_t* tmp24  = NULL;
        while(cell24 != NULL) {
            tmp24 = cell24->next;
            free(cell24);
            cell24 = tmp24;
        }
        free(sortedlist34);
        DEBUG_FREE(sortedlist34->id);
   }
   sortedlist0->refC--;
   if(sortedlist0->refC == 0){
        cell_t* cell25 = sortedlist0->root;
        cell_t* tmp25  = NULL;
        while(cell25 != NULL) {
            tmp25 = cell25->next;
            free(cell25);
            cell25 = tmp25;
        }
        free(sortedlist0);
        DEBUG_FREE(sortedlist0->id);
   }
   return 0;
}


```
```sortedlist7_5.h
#ifndef sortedlist7_5
#define sortedlist7_5
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef DEBUG
    #define DEBUG_NEW(id) printf("[NEW]\t\tId %d created\n", id)
    #define DEBUG_COPY(id) printf("[COPY]\t\tId %d copied\n", id)
    #define DEBUG_RETURN(id) printf("[RETURN]\tId %d returned\n", id)
    #define DEBUG_FREE(id) printf("[FREE]\t\tId %d freed\n", id)
#else
    #define DEBUG_NEW(id)
    #define DEBUG_COPY(id)
    #define DEBUG_RETURN(id)
    #define DEBUG_FREE(id)
#endif
#include <stdbool.h>
typedef struct cell_t {
     struct cell_t* next;
     unsigned int val;
} cell_t;
typedef struct sortedlist_t {
     cell_t* root;
     size_t refC;
     int id;
     unsigned int n;
} sortedlist_t;
typedef struct {
   sortedlist_t** data;
   size_t size;
} sortedlist_t_param;

unsigned long get_path();
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func6(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func7(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func8(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func9(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func10(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func11(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func12(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func13(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func14(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func15(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func16(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func17(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func18(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func19(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func20(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func21(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func22(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func23(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func3(sortedlist_t_param* vars, const unsigned long PATH0, int loopsFactor);
sortedlist_t* func4(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func5(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor);
#endif
```
