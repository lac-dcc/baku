```func0.c
#include "sortedlist5_9.h" 
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist1;
   if (pCounter > 0) {
      sortedlist1 = vars->data[--pCounter];
      sortedlist1->refC++;
      DEBUG_COPY(sortedlist1->id);
   } else {
      sortedlist1 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist1->refC = 1;
      sortedlist1->id = 1;
      sortedlist1->n = 0;
      sortedlist1->root = NULL;
      DEBUG_NEW(sortedlist1->id);
   }
   unsigned int loop1 = 0;
   unsigned int loopLimit1 = (rand()%loopsFactor)/2 + 1;
   for(; loop1 < loopLimit1; loop1++) {
      if(sortedlist1 != NULL && sortedlist1->n > 0)
      {
          cell_t* cell0 = sortedlist1->root;
          if(cell0->val == 86)
          {
              cell0 = cell0->next;
              sortedlist1->n--;
          }else{
              while(cell0->next != NULL && cell0->next->val != 86) cell0 = cell0->next;
              if(cell0->next != NULL)
              {
                  cell0 = cell0->next->next;
                  sortedlist1->n--;
              }
           }
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist1;
      sortedlist_t* sortedlist2 = func1(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist2->id);
      free(params0.data);
      sortedlist2->refC--;
      if(sortedlist2->refC == 0){
           cell_t* cell7 = sortedlist2->root;
           cell_t* tmp7  = NULL;
           while(cell7 != NULL) {
               tmp7 = cell7->next;
               free(cell7);
               cell7 = tmp7;
           }
           free(sortedlist2);
           DEBUG_FREE(sortedlist2->id);
      }
   }
   return sortedlist1;
}


```
```func1.c
#include "sortedlist5_9.h" 
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist3;
   if (pCounter > 0) {
      sortedlist3 = vars->data[--pCounter];
      sortedlist3->refC++;
      DEBUG_COPY(sortedlist3->id);
   } else {
      sortedlist3 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist3->refC = 1;
      sortedlist3->id = 3;
      sortedlist3->n = 0;
      sortedlist3->root = NULL;
      DEBUG_NEW(sortedlist3->id);
   }
   unsigned int loop2 = 0;
   unsigned int loopLimit2 = (rand()%loopsFactor)/3 + 1;
   for(; loop2 < loopLimit2; loop2++) {
      sortedlist_t* sortedlist4;
      if (pCounter > 0) {
         sortedlist4 = vars->data[--pCounter];
         sortedlist4->refC++;
         DEBUG_COPY(sortedlist4->id);
      } else {
         sortedlist4 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist4->refC = 1;
         sortedlist4->id = 4;
         sortedlist4->n = 0;
         sortedlist4->root = NULL;
         DEBUG_NEW(sortedlist4->id);
      }
      unsigned int loop3 = 0;
      unsigned int loopLimit3 = (rand()%loopsFactor)/4 + 1;
      for(; loop3 < loopLimit3; loop3++) {
         if(sortedlist4 != NULL && sortedlist4->n > 0)
         {
             cell_t* cell1 = sortedlist4->root;
             if(cell1->val == 15)
             {
                 cell1 = cell1->next;
                 sortedlist4->n--;
             }else{
                 while(cell1->next != NULL && cell1->next->val != 15) cell1 = cell1->next;
                 if(cell1->next != NULL)
                 {
                     cell1 = cell1->next->next;
                     sortedlist4->n--;
                 }
              }
         }
         sortedlist_t_param params0;
         params0.size = 2;
         params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
         params0.data[0] = sortedlist3;
         params0.data[1] = sortedlist4;
         sortedlist_t* sortedlist5 = func2(&params0, loopsFactor);
         DEBUG_RETURN(sortedlist5->id);
         free(params0.data);
         sortedlist5->refC--;
         if(sortedlist5->refC == 0){
              cell_t* cell5 = sortedlist5->root;
              cell_t* tmp5  = NULL;
              while(cell5 != NULL) {
                  tmp5 = cell5->next;
                  free(cell5);
                  cell5 = tmp5;
              }
              free(sortedlist5);
              DEBUG_FREE(sortedlist5->id);
         }
      }
      sortedlist4->refC--;
      if(sortedlist4->refC == 0){
           cell_t* cell6 = sortedlist4->root;
           cell_t* tmp6  = NULL;
           while(cell6 != NULL) {
               tmp6 = cell6->next;
               free(cell6);
               cell6 = tmp6;
           }
           free(sortedlist4);
           DEBUG_FREE(sortedlist4->id);
      }
   }
   return sortedlist3;
}


```
```func2.c
#include "sortedlist5_9.h" 
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist6;
   if (pCounter > 0) {
      sortedlist6 = vars->data[--pCounter];
      sortedlist6->refC++;
      DEBUG_COPY(sortedlist6->id);
   } else {
      sortedlist6 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist6->refC = 1;
      sortedlist6->id = 6;
      sortedlist6->n = 0;
      sortedlist6->root = NULL;
      DEBUG_NEW(sortedlist6->id);
   }
   unsigned int loop4 = 0;
   unsigned int loopLimit4 = (rand()%loopsFactor)/5 + 1;
   for(; loop4 < loopLimit4; loop4++) {
      sortedlist_t* sortedlist7;
      if (pCounter > 0) {
         sortedlist7 = vars->data[--pCounter];
         sortedlist7->refC++;
         DEBUG_COPY(sortedlist7->id);
      } else {
         sortedlist7 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
         sortedlist7->refC = 1;
         sortedlist7->id = 7;
         sortedlist7->n = 0;
         sortedlist7->root = NULL;
         DEBUG_NEW(sortedlist7->id);
      }
      unsigned int loop5 = 0;
      unsigned int loopLimit5 = (rand()%loopsFactor)/6 + 1;
      for(; loop5 < loopLimit5; loop5++) {
         if(sortedlist7 != NULL && sortedlist7->n > 0)
         {
             cell_t* cell2 = sortedlist7->root;
             if(cell2->val == 35)
             {
                 cell2 = cell2->next;
                 sortedlist7->n--;
             }else{
                 while(cell2->next != NULL && cell2->next->val != 35) cell2 = cell2->next;
                 if(cell2->next != NULL)
                 {
                     cell2 = cell2->next->next;
                     sortedlist7->n--;
                 }
              }
         }
         sortedlist_t_param params0;
         params0.size = 2;
         params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
         params0.data[0] = sortedlist6;
         params0.data[1] = sortedlist7;
         sortedlist_t* sortedlist8 = func3(&params0, loopsFactor);
         DEBUG_RETURN(sortedlist8->id);
         free(params0.data);
         sortedlist8->refC--;
         if(sortedlist8->refC == 0){
              cell_t* cell3 = sortedlist8->root;
              cell_t* tmp3  = NULL;
              while(cell3 != NULL) {
                  tmp3 = cell3->next;
                  free(cell3);
                  cell3 = tmp3;
              }
              free(sortedlist8);
              DEBUG_FREE(sortedlist8->id);
         }
      }
      sortedlist7->refC--;
      if(sortedlist7->refC == 0){
           cell_t* cell4 = sortedlist7->root;
           cell_t* tmp4  = NULL;
           while(cell4 != NULL) {
               tmp4 = cell4->next;
               free(cell4);
               cell4 = tmp4;
           }
           free(sortedlist7);
           DEBUG_FREE(sortedlist7->id);
      }
   }
   return sortedlist6;
}


```
```func3.c
#include "sortedlist5_9.h" 
sortedlist_t* func3(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist9;
   if (pCounter > 0) {
      sortedlist9 = vars->data[--pCounter];
      sortedlist9->refC++;
      DEBUG_COPY(sortedlist9->id);
   } else {
      sortedlist9 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist9->refC = 1;
      sortedlist9->id = 9;
      sortedlist9->n = 0;
      sortedlist9->root = NULL;
      DEBUG_NEW(sortedlist9->id);
   }
   return sortedlist9;
}


```
```path.c
#include "sortedlist5_9.h" 
unsigned long get_path() {
   const char* path = getenv("BENCH_PATH");
   if(path != NULL) { 
      return atoi(path);
   }else {
      unsigned long n = rand();
      return (n << 32) | rand();
   }
}


```
```sortedlist5_9.c
#include "sortedlist5_9.h"

int main(int argc, char** argv) {
   int loopsFactor = 100;
   srand(0);
   for (int i = 1; i < argc; i++) {
      if (strcmp(argv[i], "-path-seed") == 0) {
         i++;
         if (i < argc) {
            srand(atoi(argv[i]));
         }
      }
      else if (strcmp(argv[i], "-loops-factor") == 0) {
         i++;
         if (i < argc) {
            loopsFactor = atoi(argv[i]);
         }
      }
   }
   unsigned int loop0 = 0;
   unsigned int loopLimit0 = (rand()%loopsFactor)/1 + 1;
   for(; loop0 < loopLimit0; loop0++) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist0 = func0(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist0->id);
      free(params0.data);
      sortedlist0->refC--;
      if(sortedlist0->refC == 0){
           cell_t* cell8 = sortedlist0->root;
           cell_t* tmp8  = NULL;
           while(cell8 != NULL) {
               tmp8 = cell8->next;
               free(cell8);
               cell8 = tmp8;
           }
           free(sortedlist0);
           DEBUG_FREE(sortedlist0->id);
      }
   }
   return 0;
}


```
```sortedlist5_9.h
#ifndef sortedlist5_9
#define sortedlist5_9
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef DEBUG
    #define DEBUG_NEW(id) printf("[NEW]\t\tId %d created\n", id)
    #define DEBUG_COPY(id) printf("[COPY]\t\tId %d copied\n", id)
    #define DEBUG_RETURN(id) printf("[RETURN]\tId %d returned\n", id)
    #define DEBUG_FREE(id) printf("[FREE]\t\tId %d freed\n", id)
#else
    #define DEBUG_NEW(id)
    #define DEBUG_COPY(id)
    #define DEBUG_RETURN(id)
    #define DEBUG_FREE(id)
#endif
#include <stdbool.h>
typedef struct cell_t {
     struct cell_t* next;
     unsigned int val;
} cell_t;
typedef struct sortedlist_t {
     cell_t* root;
     size_t refC;
     int id;
     unsigned int n;
} sortedlist_t;
typedef struct {
   sortedlist_t** data;
   size_t size;
} sortedlist_t_param;

unsigned long get_path();
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func3(sortedlist_t_param* vars, int loopsFactor);
#endif
```
