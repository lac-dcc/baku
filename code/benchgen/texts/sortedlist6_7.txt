```func0.c
#include "sortedlist6_7.h" 
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist1;
   if (pCounter > 0) {
      sortedlist1 = vars->data[--pCounter];
      sortedlist1->refC++;
      DEBUG_COPY(sortedlist1->id);
   } else {
      sortedlist1 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist1->refC = 1;
      sortedlist1->id = 1;
      sortedlist1->n = 0;
      sortedlist1->root = NULL;
      DEBUG_NEW(sortedlist1->id);
   }
   unsigned int loop1 = 0;
   unsigned int loopLimit1 = (rand()%loopsFactor)/2 + 1;
   for(; loop1 < loopLimit1; loop1++) {
      if(sortedlist1 != NULL && sortedlist1->n > 0)
      {
          cell_t* cell0 = sortedlist1->root;
          if(cell0->val == 86)
          {
              cell0 = cell0->next;
              sortedlist1->n--;
          }else{
              while(cell0->next != NULL && cell0->next->val != 86) cell0 = cell0->next;
              if(cell0->next != NULL)
              {
                  cell0 = cell0->next->next;
                  sortedlist1->n--;
              }
           }
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist1;
      sortedlist_t* sortedlist2 = func1(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist2->id);
      free(params0.data);
      sortedlist2->refC--;
      if(sortedlist2->refC == 0){
           cell_t* cell11 = sortedlist2->root;
           cell_t* tmp11  = NULL;
           while(cell11 != NULL) {
               tmp11 = cell11->next;
               free(cell11);
               cell11 = tmp11;
           }
           free(sortedlist2);
           DEBUG_FREE(sortedlist2->id);
      }
   }
   return sortedlist1;
}


```
```func1.c
#include "sortedlist6_7.h" 
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist3;
   if (pCounter > 0) {
      sortedlist3 = vars->data[--pCounter];
      sortedlist3->refC++;
      DEBUG_COPY(sortedlist3->id);
   } else {
      sortedlist3 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist3->refC = 1;
      sortedlist3->id = 3;
      sortedlist3->n = 0;
      sortedlist3->root = NULL;
      DEBUG_NEW(sortedlist3->id);
   }
   unsigned int loop2 = 0;
   unsigned int loopLimit2 = (rand()%loopsFactor)/3 + 1;
   for(; loop2 < loopLimit2; loop2++) {
      if(sortedlist3 != NULL && sortedlist3->n > 0) {
           cell_t* cell1 = sortedlist3->root;
           if(sortedlist3->n == 0) {
               sortedlist3->root = (cell_t*)malloc(sizeof(cell_t));
               sortedlist3->root->val  = 15;
               sortedlist3->root->next = NULL;
               sortedlist3->n++;
           } else {
               while(cell1 != NULL)
               {
                   if(cell1->next == NULL && cell1->val < 15) {
                       cell1->next = (cell_t*)malloc(sizeof(cell_t));
                       cell1->next->next = NULL;
                       cell1->next->val  = 15;
                       sortedlist3->n++;
                       break;
                   } else if(15 < cell1->val) {
                       cell_t* tmp1 = cell1->next;
                       cell1->next = (cell_t*)malloc(sizeof(cell_t));
                       cell1->next->next = tmp1;
                       int tmp_val1 = cell1->val;
                       cell1->val = 15;
                       cell1->next->val = tmp_val1;
                       sortedlist3->n++;
                       break;
                   }
                   cell1 = cell1->next;
               }
           }
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist3;
      sortedlist_t* sortedlist4 = func2(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist4->id);
      free(params0.data);
      sortedlist4->refC--;
      if(sortedlist4->refC == 0){
           cell_t* cell10 = sortedlist4->root;
           cell_t* tmp10  = NULL;
           while(cell10 != NULL) {
               tmp10 = cell10->next;
               free(cell10);
               cell10 = tmp10;
           }
           free(sortedlist4);
           DEBUG_FREE(sortedlist4->id);
      }
   }
   return sortedlist3;
}


```
```func2.c
#include "sortedlist6_7.h" 
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist5;
   if (pCounter > 0) {
      sortedlist5 = vars->data[--pCounter];
      sortedlist5->refC++;
      DEBUG_COPY(sortedlist5->id);
   } else {
      sortedlist5 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist5->refC = 1;
      sortedlist5->id = 5;
      sortedlist5->n = 0;
      sortedlist5->root = NULL;
      DEBUG_NEW(sortedlist5->id);
   }
   unsigned int loop3 = 0;
   unsigned int loopLimit3 = (rand()%loopsFactor)/4 + 1;
   for(; loop3 < loopLimit3; loop3++) {
      if(sortedlist5 != NULL && sortedlist5->n > 0)
      {
          cell_t* cell2 = sortedlist5->root;
          if(cell2->val == 35)
          {
              cell2 = cell2->next;
              sortedlist5->n--;
          }else{
              while(cell2->next != NULL && cell2->next->val != 35) cell2 = cell2->next;
              if(cell2->next != NULL)
              {
                  cell2 = cell2->next->next;
                  sortedlist5->n--;
              }
           }
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist5;
      sortedlist_t* sortedlist6 = func3(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist6->id);
      free(params0.data);
      sortedlist6->refC--;
      if(sortedlist6->refC == 0){
           cell_t* cell9 = sortedlist6->root;
           cell_t* tmp9  = NULL;
           while(cell9 != NULL) {
               tmp9 = cell9->next;
               free(cell9);
               cell9 = tmp9;
           }
           free(sortedlist6);
           DEBUG_FREE(sortedlist6->id);
      }
   }
   return sortedlist5;
}


```
```func3.c
#include "sortedlist6_7.h" 
sortedlist_t* func3(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist7;
   if (pCounter > 0) {
      sortedlist7 = vars->data[--pCounter];
      sortedlist7->refC++;
      DEBUG_COPY(sortedlist7->id);
   } else {
      sortedlist7 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist7->refC = 1;
      sortedlist7->id = 7;
      sortedlist7->n = 0;
      sortedlist7->root = NULL;
      DEBUG_NEW(sortedlist7->id);
   }
   unsigned int loop4 = 0;
   unsigned int loopLimit4 = (rand()%loopsFactor)/5 + 1;
   for(; loop4 < loopLimit4; loop4++) {
      if(sortedlist7 != NULL && sortedlist7->n > 0) {
           cell_t* cell3 = sortedlist7->root;
           if(sortedlist7->n == 0) {
               sortedlist7->root = (cell_t*)malloc(sizeof(cell_t));
               sortedlist7->root->val  = 92;
               sortedlist7->root->next = NULL;
               sortedlist7->n++;
           } else {
               while(cell3 != NULL)
               {
                   if(cell3->next == NULL && cell3->val < 92) {
                       cell3->next = (cell_t*)malloc(sizeof(cell_t));
                       cell3->next->next = NULL;
                       cell3->next->val  = 92;
                       sortedlist7->n++;
                       break;
                   } else if(92 < cell3->val) {
                       cell_t* tmp3 = cell3->next;
                       cell3->next = (cell_t*)malloc(sizeof(cell_t));
                       cell3->next->next = tmp3;
                       int tmp_val3 = cell3->val;
                       cell3->val = 92;
                       cell3->next->val = tmp_val3;
                       sortedlist7->n++;
                       break;
                   }
                   cell3 = cell3->next;
               }
           }
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist7;
      sortedlist_t* sortedlist8 = func4(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist8->id);
      free(params0.data);
      sortedlist8->refC--;
      if(sortedlist8->refC == 0){
           cell_t* cell8 = sortedlist8->root;
           cell_t* tmp8  = NULL;
           while(cell8 != NULL) {
               tmp8 = cell8->next;
               free(cell8);
               cell8 = tmp8;
           }
           free(sortedlist8);
           DEBUG_FREE(sortedlist8->id);
      }
   }
   return sortedlist7;
}


```
```func4.c
#include "sortedlist6_7.h" 
sortedlist_t* func4(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist9;
   if (pCounter > 0) {
      sortedlist9 = vars->data[--pCounter];
      sortedlist9->refC++;
      DEBUG_COPY(sortedlist9->id);
   } else {
      sortedlist9 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist9->refC = 1;
      sortedlist9->id = 9;
      sortedlist9->n = 0;
      sortedlist9->root = NULL;
      DEBUG_NEW(sortedlist9->id);
   }
   unsigned int loop5 = 0;
   unsigned int loopLimit5 = (rand()%loopsFactor)/6 + 1;
   for(; loop5 < loopLimit5; loop5++) {
      if(sortedlist9 != NULL && sortedlist9->n > 0)
      {
          cell_t* cell4 = sortedlist9->root;
          if(cell4->val == 21)
          {
              cell4 = cell4->next;
              sortedlist9->n--;
          }else{
              while(cell4->next != NULL && cell4->next->val != 21) cell4 = cell4->next;
              if(cell4->next != NULL)
              {
                  cell4 = cell4->next->next;
                  sortedlist9->n--;
              }
           }
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist9;
      sortedlist_t* sortedlist10 = func5(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist10->id);
      free(params0.data);
      sortedlist10->refC--;
      if(sortedlist10->refC == 0){
           cell_t* cell7 = sortedlist10->root;
           cell_t* tmp7  = NULL;
           while(cell7 != NULL) {
               tmp7 = cell7->next;
               free(cell7);
               cell7 = tmp7;
           }
           free(sortedlist10);
           DEBUG_FREE(sortedlist10->id);
      }
   }
   return sortedlist9;
}


```
```func5.c
#include "sortedlist6_7.h" 
sortedlist_t* func5(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist11;
   if (pCounter > 0) {
      sortedlist11 = vars->data[--pCounter];
      sortedlist11->refC++;
      DEBUG_COPY(sortedlist11->id);
   } else {
      sortedlist11 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist11->refC = 1;
      sortedlist11->id = 11;
      sortedlist11->n = 0;
      sortedlist11->root = NULL;
      DEBUG_NEW(sortedlist11->id);
   }
   unsigned int loop6 = 0;
   unsigned int loopLimit6 = (rand()%loopsFactor)/7 + 1;
   for(; loop6 < loopLimit6; loop6++) {
      if(sortedlist11 != NULL && sortedlist11->n > 0) {
           cell_t* cell5 = sortedlist11->root;
           if(sortedlist11->n == 0) {
               sortedlist11->root = (cell_t*)malloc(sizeof(cell_t));
               sortedlist11->root->val  = 27;
               sortedlist11->root->next = NULL;
               sortedlist11->n++;
           } else {
               while(cell5 != NULL)
               {
                   if(cell5->next == NULL && cell5->val < 27) {
                       cell5->next = (cell_t*)malloc(sizeof(cell_t));
                       cell5->next->next = NULL;
                       cell5->next->val  = 27;
                       sortedlist11->n++;
                       break;
                   } else if(27 < cell5->val) {
                       cell_t* tmp5 = cell5->next;
                       cell5->next = (cell_t*)malloc(sizeof(cell_t));
                       cell5->next->next = tmp5;
                       int tmp_val5 = cell5->val;
                       cell5->val = 27;
                       cell5->next->val = tmp_val5;
                       sortedlist11->n++;
                       break;
                   }
                   cell5 = cell5->next;
               }
           }
      }
      sortedlist_t_param params0;
      params0.size = 1;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      params0.data[0] = sortedlist11;
      sortedlist_t* sortedlist12 = func6(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist12->id);
      free(params0.data);
      sortedlist12->refC--;
      if(sortedlist12->refC == 0){
           cell_t* cell6 = sortedlist12->root;
           cell_t* tmp6  = NULL;
           while(cell6 != NULL) {
               tmp6 = cell6->next;
               free(cell6);
               cell6 = tmp6;
           }
           free(sortedlist12);
           DEBUG_FREE(sortedlist12->id);
      }
   }
   return sortedlist11;
}


```
```func6.c
#include "sortedlist6_7.h" 
sortedlist_t* func6(sortedlist_t_param* vars, int loopsFactor) {
   size_t pCounter = vars->size;
   sortedlist_t* sortedlist13;
   if (pCounter > 0) {
      sortedlist13 = vars->data[--pCounter];
      sortedlist13->refC++;
      DEBUG_COPY(sortedlist13->id);
   } else {
      sortedlist13 = (sortedlist_t*)malloc(sizeof(sortedlist_t));
      sortedlist13->refC = 1;
      sortedlist13->id = 13;
      sortedlist13->n = 0;
      sortedlist13->root = NULL;
      DEBUG_NEW(sortedlist13->id);
   }
   return sortedlist13;
}


```
```path.c
#include "sortedlist6_7.h" 
unsigned long get_path() {
   const char* path = getenv("BENCH_PATH");
   if(path != NULL) { 
      return atoi(path);
   }else {
      unsigned long n = rand();
      return (n << 32) | rand();
   }
}


```
```sortedlist6_7.c
#include "sortedlist6_7.h"

int main(int argc, char** argv) {
   int loopsFactor = 100;
   srand(0);
   for (int i = 1; i < argc; i++) {
      if (strcmp(argv[i], "-path-seed") == 0) {
         i++;
         if (i < argc) {
            srand(atoi(argv[i]));
         }
      }
      else if (strcmp(argv[i], "-loops-factor") == 0) {
         i++;
         if (i < argc) {
            loopsFactor = atoi(argv[i]);
         }
      }
   }
   unsigned int loop0 = 0;
   unsigned int loopLimit0 = (rand()%loopsFactor)/1 + 1;
   for(; loop0 < loopLimit0; loop0++) {
      sortedlist_t_param params0;
      params0.size = 0;
      params0.data = (sortedlist_t**)malloc(params0.size*sizeof(sortedlist_t*));
      sortedlist_t* sortedlist0 = func0(&params0, loopsFactor);
      DEBUG_RETURN(sortedlist0->id);
      free(params0.data);
      if(sortedlist0 != NULL && sortedlist0->n > 0)
      {
          cell_t* cell12 = sortedlist0->root;
          if(cell12->val == 11)
          {
              cell12 = cell12->next;
              sortedlist0->n--;
          }else{
              while(cell12->next != NULL && cell12->next->val != 11) cell12 = cell12->next;
              if(cell12->next != NULL)
              {
                  cell12 = cell12->next->next;
                  sortedlist0->n--;
              }
           }
      }
      sortedlist0->refC--;
      if(sortedlist0->refC == 0){
           cell_t* cell13 = sortedlist0->root;
           cell_t* tmp13  = NULL;
           while(cell13 != NULL) {
               tmp13 = cell13->next;
               free(cell13);
               cell13 = tmp13;
           }
           free(sortedlist0);
           DEBUG_FREE(sortedlist0->id);
      }
   }
   return 0;
}


```
```sortedlist6_7.h
#ifndef sortedlist6_7
#define sortedlist6_7
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#ifdef DEBUG
    #define DEBUG_NEW(id) printf("[NEW]\t\tId %d created\n", id)
    #define DEBUG_COPY(id) printf("[COPY]\t\tId %d copied\n", id)
    #define DEBUG_RETURN(id) printf("[RETURN]\tId %d returned\n", id)
    #define DEBUG_FREE(id) printf("[FREE]\t\tId %d freed\n", id)
#else
    #define DEBUG_NEW(id)
    #define DEBUG_COPY(id)
    #define DEBUG_RETURN(id)
    #define DEBUG_FREE(id)
#endif
#include <stdbool.h>
typedef struct cell_t {
     struct cell_t* next;
     unsigned int val;
} cell_t;
typedef struct sortedlist_t {
     cell_t* root;
     size_t refC;
     int id;
     unsigned int n;
} sortedlist_t;
typedef struct {
   sortedlist_t** data;
   size_t size;
} sortedlist_t_param;

unsigned long get_path();
sortedlist_t* func0(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func1(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func2(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func3(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func4(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func5(sortedlist_t_param* vars, int loopsFactor);
sortedlist_t* func6(sortedlist_t_param* vars, int loopsFactor);
#endif
```
